<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>OrangePi zero 3</title>
    <url>/archives/3f4f88f3.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="da6cc8e880e06ff05a564ab534ca20ede8fb83d7ec03fa9953760775a4a6f4e1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码才能查看哦！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Ubuntu</tag>
        <tag>OrangePi</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机while循环一次时间是多少</title>
    <url>/archives/3a69b252.html</url>
    <content><![CDATA[<h1 id="单片机while-t–-延时时间怎样获取"><a href="#单片机while-t–-延时时间怎样获取" class="headerlink" title="单片机while(t–)延时时间怎样获取"></a>单片机while(t–)延时时间怎样获取</h1><p>先打开keil，</p>
<p>找到 <code>魔法棒 -&gt; Debug -&gt; Use Simulator</code>，将该选项选上，</p>
<p>然后进 <code>Debug</code> 模式</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">My_Delay</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">while</span>(i--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        My_Delay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在左侧栏选择 <code>Register</code> 有个 <code>Sec</code> 可计程序运行时间（单位为秒）</p>
<p>可精确到 <code>us</code> 级</p>
<p>单步运行，然后算出时间差值即可知道 <code>while</code> 的延时时间</p>
]]></content>
      <tags>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>NMOS和PMOS有什么区别</title>
    <url>/archives/2e946417.html</url>
    <content><![CDATA[<p>​        MOS管，分为N沟道和P沟道两种。由于PMOS导通电阻大，价格贵，替换种类少等原因，故常用NMOS，因为其导通电阻小，且容易制造。</p>
<span id="more"></span>

<ol>
<li>导通特性</li>
</ol>
<p>NMOS的特性，Vgs大于一定的值就会导通，适合用于源极接地时的情况（低端驱动）。<br>PMOS的特性，Vgs小于一定的值就会导通，适合用于源极接VCC时的情况（高端驱动）。</p>
<ol start="2">
<li>MOS开关管损失</li>
</ol>
<p>不管是NMOS还是PMOS，导通后都有导通电阻存在，这样电流就会在这个电阻上消耗能量，这部分消耗的能量叫做导通损耗。选择导通电阻小的MOS管会减小导通损耗。现在的小功率MOS管导通电阻一般在几十毫欧左右，几毫欧的也有。 MOS在导通和截止的时候，一定不是在瞬间完成的。MOS两端的电压有一个下降的过程，流过的电流有一个上升的过程，在这段时间内，MOS管的损失是电压和电流的乘积，叫做开关损失。通常开关损失比导通损失大得多，而且开关频率越高，损失也越大。 导通瞬间电压和电流的乘积很大，造成的损失也就很大。缩短开关时间，可以减小每次导通时的损失；降低开关频率，可以减小单位时间内的开关次数。这两种办法都可以减小开关损失。</p>
<center>——  END ——</center>
]]></content>
      <tags>
        <tag>MOS管</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式之红外通信</title>
    <url>/archives/bbd81c5a.html</url>
    <content><![CDATA[<h1 id="红外通信"><a href="#红外通信" class="headerlink" title="红外通信"></a>红外通信</h1><p>上一篇只是粗略地提了一下红外通信，这篇来说些注意事项与细节问题</p>
<span id="more"></span>

<h2 id="载波"><a href="#载波" class="headerlink" title="载波"></a>载波</h2><p>红外通信一般为 <code>38K</code> 载波，“载波” 简单来讲就是一段周期性的、<strong>不断震荡</strong>的波；</p>
<p><em>注：特别注意的是，对于一些非信号专业的新手来讲，虽然眼睛看到了该条件，但并没有进行思考，只当作“公理”给记住，这时在使用时往往会忽略掉。与福尔摩斯说过的话有异曲同工之处：“你只是用眼睛看，并不是在观察”，现在是：“你只是眼睛看到了，却没有在思考。”</em></p>
<p>我们可通过调制将信息加载到载波上，这样信息就会随着波的传播而发射出去了；波发出去后会受到外界环境光的干扰，这就可能会导致信息的丢失或篡改；理论上来讲：传播距离越远，信息丢失的概率越大。</p>
<h2 id="38K频率"><a href="#38K频率" class="headerlink" title="38K频率"></a>38K频率</h2><p>上面提到载波上的信息可能会丢失，那有没有什么预防措施呢？</p>
<p>这就要说到用 <code>38K</code> 载波的原因了：主要是为了<strong>提高抗干扰能力</strong>，尽量避免因环境光干扰导致的信息丢失或篡改；</p>
<p>另外的原因（来自百度）：</p>
<p>这一频率的选择与常用的 <code>455kHz</code> 晶振密切相关。‌在发射端，‌通过对晶振进行整数分频，‌通常取分频系数为12，‌从而得到 <code>38kHz</code> 的载波频率。‌这种分频方式不仅技术上可行，‌而且经济实用，‌因为它利用了现有的成熟技术和组件，‌避免了开发高精度晶振的成本和复杂性。‌</p>
<p>此外，‌<code>38kHz</code> 的载波频率还具有其特定的优势。‌在红外通信中，‌使用 <code>38kHz</code> 的载波可以实现较高的通信质量和较远的通信距离，‌同时保持较低的功耗和成本。‌这种频率的选择也符合红外通信的基本需求，‌即在保证通信效果的同时，‌尽可能地降低系统成本和功耗。‌</p>
<p><strong>值得注意的是：</strong></p>
<p><code>38K</code> 载波意味着每秒有38000个周期，单个周期的时间为1/38000S。‌这个时间长度代表了<strong>一个完整脉冲</strong>的时间，‌包括高电平和低电平的总时间。‌</p>
<p>但是我们红外通信需要的是高低电平均为1/38000S，因此我们定时器应配置为 <code>76K</code> ，这样每次进中断的时间就是1/38000S，那么产生的高、低电平就是1/38000S了。</p>
<p>OK，了解基本原理后就有大概的框架了：</p>
<ol>
<li>首先要有个波形发生器，用来产生 <code>38K</code> 载波</li>
<li>制定自己的通信协议（也可以使用现有的协议，如： NEC协议）</li>
<li>代码实现</li>
</ol>
]]></content>
      <categories>
        <category>嵌入式</category>
        <category>红外</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>红外</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式总结（一）</title>
    <url>/archives/76bb4a41.html</url>
    <content><![CDATA[<h2 id="红外通信原理"><a href="#红外通信原理" class="headerlink" title="红外通信原理"></a>红外通信原理</h2><h3 id="红外通信的整个工作过程"><a href="#红外通信的整个工作过程" class="headerlink" title="红外通信的整个工作过程"></a>红外通信的整个工作过程</h3><h4 id="发送过程"><a href="#发送过程" class="headerlink" title="发送过程"></a>发送过程</h4><p><strong>数据 -&gt; 编码 -&gt; 调制 -&gt; 发送电路</strong><span id="more"></span></p>
<ol>
<li><p>数据：假设发送的数据为 0XA5，二进制为：10100101 </p>
</li>
<li><p>编码：用脉冲宽度编码（Pulse Width Encoding）来表示二进制数据。每个数据位由一系列的脉冲组成，逻辑0和逻辑1分别由不同的脉冲宽度表示。现假设如下：</p>
</li>
</ol>
<p>​            <strong>逻辑0为：0.5ms高 + 0.5ms低；</strong>            <strong>逻辑1为：1ms高 + 0.5ms低；</strong></p>
<ol start="3">
<li>调制：就是把编码数据放到一定频率的载波上面，即使用数据调制载波，形成一串脉冲信号</li>
<li>发送电路：即：红外灯珠对脉冲信号的发送 + 脉冲信号的放大</li>
</ol>
<h4 id="接收过程"><a href="#接收过程" class="headerlink" title="接收过程"></a>接收过程</h4><p><strong>接收电路 -&gt; 解调 -&gt; 解码 -&gt; 数据</strong></p>
<ol>
<li>接收电路：接收发过来的红外信号</li>
<li>解调：当红外接收管接收到调制信号时，输出高电平，否则输出为低电平</li>
<li>解码：解调后将得到的一系列脉冲变为二进制</li>
<li>数据：解码后即可得到发来的数据，即 0XA5 （二进制为：10100101）</li>
</ol>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>红外通信的优点：抗电磁干扰、成本低</strong></p>
<p><strong>红外通信的缺点：传输效率低，易受到环境光干扰导致传输误码</strong></p>
<h2 id="ADC数据常用的处理"><a href="#ADC数据常用的处理" class="headerlink" title="ADC数据常用的处理"></a>ADC数据常用的处理</h2><p>为什么要对采样的数据进行处理呢？直接拿来用不行吗？<br>因为任何系统都会存在干扰，进行数据处理就是为了尽量避免因外界干扰引起的误差。</p>
<h4 id="常用的两种滤波方法"><a href="#常用的两种滤波方法" class="headerlink" title="常用的两种滤波方法"></a>常用的两种滤波方法</h4><ol>
<li>多次采样加权取平均，在写程序的时候可以运用一些技巧：首先我们ADC采集8次数据并且对这8次数据累加（可以每1ms调用该函数），累加完成后将累加结果右移3位得到最后的采样结果。<br> 当然这个方法还可以进一步改善，比如取样10次，然后去掉最大值和最小值，再对剩下的8次进行取平均。</li>
</ol>
<p><strong>但因为需要多次采样，更新数据的时间会很长，比如取样8次，每1ms取样一次，那么更新数据就需要8ms时间，所以对采样的数据实时性要求不是很高的系统才可以用这种方法</strong></p>
<ol start="2">
<li>中值滤波法（可用在实时性比较高的系统）：实现思想就是取5个数据，每次采样的新数据替换掉最老的数据；然后把中间的那个数据当做是采样数据，这样不仅可以有效抑制干扰，而且响应速度快。</li>
</ol>
<h4 id="十大滤波方法及代码实现"><a href="#十大滤波方法及代码实现" class="headerlink" title="十大滤波方法及代码实现"></a>十大滤波方法及代码实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;windows.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> ftable[<span class="number">255</span>] = &#123;</span><br><span class="line">    <span class="number">2048</span>, <span class="number">2098</span>, <span class="number">2148</span>, <span class="number">2198</span>, <span class="number">2248</span>, <span class="number">2298</span>, <span class="number">2348</span>, <span class="number">2398</span>, <span class="number">2447</span>, <span class="number">2496</span>,</span><br><span class="line">    <span class="number">2545</span>, <span class="number">2594</span>, <span class="number">2642</span>, <span class="number">2690</span>, <span class="number">2737</span>, <span class="number">2785</span>, <span class="number">2831</span>, <span class="number">2877</span>, <span class="number">2923</span>, <span class="number">2968</span>,</span><br><span class="line">    <span class="number">3013</span>, <span class="number">3057</span>, <span class="number">3100</span>, <span class="number">3143</span>, <span class="number">3185</span>, <span class="number">3227</span>, <span class="number">3267</span>, <span class="number">3307</span>, <span class="number">3347</span>, <span class="number">3385</span>,</span><br><span class="line">    <span class="number">3423</span>, <span class="number">3460</span>, <span class="number">3496</span>, <span class="number">3531</span>, <span class="number">3565</span>, <span class="number">3598</span>, <span class="number">3631</span>, <span class="number">3662</span>, <span class="number">3692</span>, <span class="number">3722</span>,</span><br><span class="line">    <span class="number">3750</span>, <span class="number">3778</span>, <span class="number">3804</span>, <span class="number">3829</span>, <span class="number">3854</span>, <span class="number">3877</span>, <span class="number">3899</span>, <span class="number">3920</span>, <span class="number">3940</span>, <span class="number">3958</span>,</span><br><span class="line">    <span class="number">3976</span>, <span class="number">3992</span>, <span class="number">4007</span>, <span class="number">4021</span>, <span class="number">4034</span>, <span class="number">4046</span>, <span class="number">4056</span>, <span class="number">4065</span>, <span class="number">4073</span>, <span class="number">4080</span>,</span><br><span class="line">    <span class="number">4086</span>, <span class="number">4090</span>, <span class="number">4093</span>, <span class="number">4095</span>, <span class="number">4095</span>, <span class="number">4095</span>, <span class="number">4093</span>, <span class="number">4090</span>, <span class="number">4086</span>, <span class="number">4080</span>,</span><br><span class="line">    <span class="number">4073</span>, <span class="number">4065</span>, <span class="number">4056</span>, <span class="number">4046</span>, <span class="number">4034</span>, <span class="number">4021</span>, <span class="number">4007</span>, <span class="number">3992</span>, <span class="number">3976</span>, <span class="number">3958</span>,</span><br><span class="line">    <span class="number">3940</span>, <span class="number">3920</span>, <span class="number">3899</span>, <span class="number">3877</span>, <span class="number">3854</span>, <span class="number">3829</span>, <span class="number">3804</span>, <span class="number">3778</span>, <span class="number">3750</span>, <span class="number">3722</span>,</span><br><span class="line">    <span class="number">3692</span>, <span class="number">3662</span>, <span class="number">3631</span>, <span class="number">3598</span>, <span class="number">3565</span>, <span class="number">3531</span>, <span class="number">3496</span>, <span class="number">3460</span>, <span class="number">3423</span>, <span class="number">3385</span>,</span><br><span class="line">    <span class="number">3347</span>, <span class="number">3307</span>, <span class="number">3267</span>, <span class="number">3227</span>, <span class="number">3185</span>, <span class="number">3143</span>, <span class="number">3100</span>, <span class="number">3057</span>, <span class="number">3013</span>, <span class="number">2968</span>,</span><br><span class="line">    <span class="number">2923</span>, <span class="number">2877</span>, <span class="number">2831</span>, <span class="number">2785</span>, <span class="number">2737</span>, <span class="number">2690</span>, <span class="number">2642</span>, <span class="number">2594</span>, <span class="number">2545</span>, <span class="number">2496</span>,</span><br><span class="line">    <span class="number">2447</span>, <span class="number">2398</span>, <span class="number">2348</span>, <span class="number">2298</span>, <span class="number">2248</span>, <span class="number">2198</span>, <span class="number">2148</span>, <span class="number">2098</span>, <span class="number">2047</span>, <span class="number">1997</span>,</span><br><span class="line">    <span class="number">1947</span>, <span class="number">1897</span>, <span class="number">1847</span>, <span class="number">1797</span>, <span class="number">1747</span>, <span class="number">1697</span>, <span class="number">1648</span>, <span class="number">1599</span>, <span class="number">1550</span>, <span class="number">1501</span>,</span><br><span class="line">    <span class="number">1453</span>, <span class="number">1405</span>, <span class="number">1358</span>, <span class="number">1310</span>, <span class="number">1264</span>, <span class="number">1218</span>, <span class="number">1172</span>, <span class="number">1127</span>, <span class="number">1082</span>, <span class="number">1038</span>,</span><br><span class="line">    <span class="number">995</span>, <span class="number">952</span>, <span class="number">910</span>, <span class="number">868</span>, <span class="number">828</span>, <span class="number">788</span>, <span class="number">748</span>, <span class="number">710</span>, <span class="number">672</span>, <span class="number">635</span>,</span><br><span class="line">    <span class="number">599</span>, <span class="number">564</span>, <span class="number">530</span>, <span class="number">497</span>, <span class="number">464</span>, <span class="number">433</span>, <span class="number">403</span>, <span class="number">373</span>, <span class="number">345</span>, <span class="number">317</span>,</span><br><span class="line">    <span class="number">291</span>, <span class="number">266</span>, <span class="number">241</span>, <span class="number">218</span>, <span class="number">196</span>, <span class="number">175</span>, <span class="number">155</span>, <span class="number">137</span>, <span class="number">119</span>, <span class="number">103</span>,</span><br><span class="line">    <span class="number">88</span>, <span class="number">74</span>, <span class="number">61</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">5</span>,</span><br><span class="line">    <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">30</span>,</span><br><span class="line">    <span class="number">39</span>, <span class="number">49</span>, <span class="number">61</span>, <span class="number">74</span>, <span class="number">88</span>, <span class="number">103</span>, <span class="number">119</span>, <span class="number">137</span>, <span class="number">155</span>, <span class="number">175</span>,</span><br><span class="line">    <span class="number">196</span>, <span class="number">218</span>, <span class="number">241</span>, <span class="number">266</span>, <span class="number">291</span>, <span class="number">317</span>, <span class="number">345</span>, <span class="number">373</span>, <span class="number">403</span>, <span class="number">433</span>,</span><br><span class="line">    <span class="number">464</span>, <span class="number">497</span>, <span class="number">530</span>, <span class="number">564</span>, <span class="number">599</span>, <span class="number">635</span>, <span class="number">672</span>, <span class="number">710</span>, <span class="number">748</span>, <span class="number">788</span>,</span><br><span class="line">    <span class="number">828</span>, <span class="number">868</span>, <span class="number">910</span>, <span class="number">952</span>, <span class="number">995</span>, <span class="number">1038</span>, <span class="number">1082</span>, <span class="number">1127</span>, <span class="number">1172</span>, <span class="number">1218</span>,</span><br><span class="line">    <span class="number">1264</span>, <span class="number">1310</span>, <span class="number">1358</span>, <span class="number">1405</span>, <span class="number">1453</span>, <span class="number">1501</span>, <span class="number">1550</span>, <span class="number">1599</span>, <span class="number">1648</span>, <span class="number">1697</span>,</span><br><span class="line">    <span class="number">1747</span>, <span class="number">1797</span>, <span class="number">1847</span>, <span class="number">1897</span>, <span class="number">1947</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法一：限幅滤波法</span></span><br><span class="line"><span class="comment">方法：根据经验判断，确定两次采样允许的最大偏差值（设为A），每次检测到新值时判断：</span></span><br><span class="line"><span class="comment">      如果本次值与上次值之差&lt;=A，则本次值有效，</span></span><br><span class="line"><span class="comment">      如果本次值与上次值之差&gt;A，则本次值无效，放弃本次值，用上次值代替本次值。</span></span><br><span class="line"><span class="comment">优点：能克服偶然因素引起的脉冲干扰</span></span><br><span class="line"><span class="comment">缺点：无法抑制周期性的干扰，平滑度差</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define A 51</span></span><br><span class="line"><span class="comment">// unsigned short Value1 = 0;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// short filter1()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     static unsigned short NewValue = 0;</span></span><br><span class="line"><span class="comment">//     Value1                         = ftable[b - 1];</span></span><br><span class="line"><span class="comment">//     NewValue                       = ftable[b];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     a++;</span></span><br><span class="line"><span class="comment">//     if (a == 254)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         a = 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     b++;</span></span><br><span class="line"><span class="comment">//     if (b == 255)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         b = 1;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     if (((NewValue - Value1) &gt; A) || ((Value1 - NewValue) &gt; A))</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         printf(&quot;------\n&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         printf(&quot;%d, %d, %d\n&quot;, NewValue - Value1, NewValue, Value1);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法二：中位值滤波法</span></span><br><span class="line"><span class="comment">方法： 连续采样N次（N取奇数），把N次采样值按大小排列，取中间值为本次有效值。</span></span><br><span class="line"><span class="comment">优点：克服偶然因素（对温度、液位的变化缓慢的被测参数有良好的滤波效果）</span></span><br><span class="line"><span class="comment">缺点：对流量、速度等快速变化的参数不宜</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define N 3</span></span><br><span class="line"><span class="comment">// unsigned short value_buf[N];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// short filter2()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     unsigned short count, i, j, temp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 将采集的ADC值分别存入数组中，且后边存的值覆盖前边存的值</span></span><br><span class="line"><span class="comment">//     for (count = 0; count &lt; N; count++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         value_buf[count] = ftable[a];</span></span><br><span class="line"><span class="comment">//         a++;</span></span><br><span class="line"><span class="comment">//         if (a == 254)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             a = 0;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 冒泡排序 - 从小到大排</span></span><br><span class="line"><span class="comment">//     for (j = 0; j &lt; N - 1; j++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         for (i = 0; i &lt; N - 1 - j; i++)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             if (value_buf[i] &gt; value_buf[i + 1])</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 temp             = value_buf[i];</span></span><br><span class="line"><span class="comment">//                 value_buf[i]     = value_buf[i + 1];</span></span><br><span class="line"><span class="comment">//                 value_buf[i + 1] = temp;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 选出中位数</span></span><br><span class="line"><span class="comment">//     printf(&quot;%d\n&quot;, value_buf[(N - 1) / 2]);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法三：算术平均滤波法</span></span><br><span class="line"><span class="comment">方法：连续取N个采样值进行算术平均运算：（ N值的选取：一般流量，N=12；压力：N=4。）</span></span><br><span class="line"><span class="comment">      N值较大时：信号平滑度较高，但灵敏度较低；</span></span><br><span class="line"><span class="comment">      N值较小时：信号平滑度较低，但灵敏度较高；</span></span><br><span class="line"><span class="comment">优点：适用于对一般具有随机干扰的信号进行滤波；这种信号的特点是有一个平均值，信号在某一数值范围附近上下波动</span></span><br><span class="line"><span class="comment">缺点：对于测量速度较慢或要求数据计算速度较快的实时控制不适用，比较浪费RAM。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define N 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// short filter3()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     unsigned short sum = 0, count;</span></span><br><span class="line"><span class="comment">//     for (count = 0; count &lt; N; count++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         sum += ftable[a];</span></span><br><span class="line"><span class="comment">//         a++;</span></span><br><span class="line"><span class="comment">//         if (a == 254)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             a = 0;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     printf(&quot;%d\n&quot;, sum / N);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法四：递推平均滤波法（又称滑动平均滤波法）</span></span><br><span class="line"><span class="comment">方法： 把连续取得的N个采样值看成一个队列，队列的长度固定为N，</span></span><br><span class="line"><span class="comment">       每次采样到一个新数据放入队尾，并扔掉原来队首的一次数据（先进先出原则），</span></span><br><span class="line"><span class="comment">       把队列中的N个数据进行算术平均运算，获得新的滤波结果。</span></span><br><span class="line"><span class="comment">       N值的选取：流量，N=12；压力，N=4；液面，N=4-12；温度，N=1-4。</span></span><br><span class="line"><span class="comment">优点：对周期性干扰有良好的抑制作用，平滑度高；</span></span><br><span class="line"><span class="comment">      适用于高频振荡的系统。</span></span><br><span class="line"><span class="comment">缺点：灵敏度低，对偶然出现的脉冲性干扰的抑制作用较差；</span></span><br><span class="line"><span class="comment">      不易消除由于脉冲干扰所引起的采样值偏差；</span></span><br><span class="line"><span class="comment">      不适用于脉冲干扰比较严重的场合；</span></span><br><span class="line"><span class="comment">      比较浪费RAM。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define FILTER4_N 3</span></span><br><span class="line"><span class="comment">// unsigned short filter_buf[FILTER4_N + 1]; // 滑动窗口大小 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// short filter4()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     static unsigned int j = 0;</span></span><br><span class="line"><span class="comment">//     int                 i = 0, filter_sum = 0;</span></span><br><span class="line"><span class="comment">//     filter_buf[FILTER4_N] = ftable[a]; // 将采集得到的数据依次存放到窗口数组最后</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     a++;</span></span><br><span class="line"><span class="comment">//     if (a == 254)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         a = 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     for (i = 0; i &lt; FILTER4_N; i++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         // i = 0 1 2</span></span><br><span class="line"><span class="comment">//         j++;</span></span><br><span class="line"><span class="comment">//         filter_buf[i] = filter_buf[i + 1]; // 将窗口数组元素左移，即舍弃窗口数组的0元素</span></span><br><span class="line"><span class="comment">//         filter_sum += filter_buf[i];       // 累加窗口数组前三个元素</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 两轮过后才出现正确的均值，一轮3次，两轮6次；故 &gt; 6</span></span><br><span class="line"><span class="comment">//     if (j &gt; 6)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         printf(&quot;%d\n&quot;, filter_sum / FILTER4_N); // 窗口的前三个元素求平均</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法五：中位值平均滤波法（又称防脉冲干扰平均滤波法）</span></span><br><span class="line"><span class="comment">方法： 采一组队列去掉最大值和最小值后取平均值，     （N值的选取：3-14）。</span></span><br><span class="line"><span class="comment">      相当于“中位值滤波法”+“算术平均滤波法”。</span></span><br><span class="line"><span class="comment">      连续采样N个数据，去掉一个最大值和一个最小值，</span></span><br><span class="line"><span class="comment">      然后计算N-2个数据的算术平均值。</span></span><br><span class="line"><span class="comment">优点： 融合了“中位值滤波法”+“算术平均滤波法”两种滤波法的优点。</span></span><br><span class="line"><span class="comment">       对于偶然出现的脉冲性干扰，可消除由其所引起的采样值偏差。</span></span><br><span class="line"><span class="comment">       对周期干扰有良好的抑制作用。</span></span><br><span class="line"><span class="comment">       平滑度高，适于高频振荡的系统。</span></span><br><span class="line"><span class="comment">缺点：对于测量速度较慢或要求数据计算速度较快的实时控制不适用，比较浪费RAM。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define N 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int filter5()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int i, j;</span></span><br><span class="line"><span class="comment">//     int filter_temp, filter_sum = 0;</span></span><br><span class="line"><span class="comment">//     int filter_buf[N];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     for (i = 0; i &lt; N; i++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         // i = 0 1 2</span></span><br><span class="line"><span class="comment">//         filter_buf[i] = ftable[a];</span></span><br><span class="line"><span class="comment">//         a++;</span></span><br><span class="line"><span class="comment">//         if (a == 254)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             a = 0;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 冒泡排序 - 从小到大排</span></span><br><span class="line"><span class="comment">//     for (j = 0; j &lt; N - 1; j++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         for (i = 0; i &lt; N - 1 - j; i++)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             if (filter_buf[i] &gt; filter_buf[i + 1])</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 filter_temp       = filter_buf[i];</span></span><br><span class="line"><span class="comment">//                 filter_buf[i]     = filter_buf[i + 1];</span></span><br><span class="line"><span class="comment">//                 filter_buf[i + 1] = filter_temp;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 去除最大最小极值后求平均 - filter_buf[0]为最小值，filter_buf[N]为最大值</span></span><br><span class="line"><span class="comment">//     for (i = 1; i &lt; N - 1; i++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         // i = 1</span></span><br><span class="line"><span class="comment">//         filter_sum += filter_buf[i];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     printf(&quot;%d\n&quot;, filter_sum / (N - 2));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法六：限幅平均滤波法</span></span><br><span class="line"><span class="comment">方法： 相当于“限幅滤波法”+“递推平均滤波法”；</span></span><br><span class="line"><span class="comment">       每次采样到的新数据先进行限幅处理，</span></span><br><span class="line"><span class="comment">       再送入队列进行递推平均滤波处理。</span></span><br><span class="line"><span class="comment">优点： 融合了两种滤波法的优点；</span></span><br><span class="line"><span class="comment">      对于偶然出现的脉冲性干扰，可消除由于脉冲干扰所引起的采样值偏差。</span></span><br><span class="line"><span class="comment">缺点：比较浪费RAM。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define FILTER6_N 3</span></span><br><span class="line"><span class="comment">// #define FILTER6_A 51</span></span><br><span class="line"><span class="comment">// int filter_buf[FILTER6_N];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int filter6()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int i;</span></span><br><span class="line"><span class="comment">//     int filter_sum            = 0;</span></span><br><span class="line"><span class="comment">//     filter_buf[FILTER6_N - 1] = ftable[a]; // 将采样值依次存到数组最后一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     a++;</span></span><br><span class="line"><span class="comment">//     if (a == 254)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         a = 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     if (a &lt; 3)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         filter_buf[FILTER6_N - 3] = ftable[0];</span></span><br><span class="line"><span class="comment">//         filter_buf[FILTER6_N - 2] = ftable[1];</span></span><br><span class="line"><span class="comment">//         filter_buf[FILTER6_N - 1] = ftable[2];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         // 若 filter_buf数组 中后两个元素之差大于 FILTER6_A</span></span><br><span class="line"><span class="comment">//         if (((filter_buf[FILTER6_N - 1] - filter_buf[FILTER6_N - 2]) &gt; FILTER6_A) || ((filter_buf[FILTER6_N - 2] - filter_buf[FILTER6_N - 1]) &gt; FILTER6_A))</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             // 将倒数第二个元素覆盖最后一个元素 - 若超出规定幅值，则舍弃本次采集的值，并使用上次的ADC值代替</span></span><br><span class="line"><span class="comment">//             filter_buf[FILTER6_N - 1] = filter_buf[FILTER6_N - 2];</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         for (i = 0; i &lt; FILTER6_N - 1; i++)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             // i = 0 1</span></span><br><span class="line"><span class="comment">//             filter_buf[i] = filter_buf[i + 1]; // 数组元素左移</span></span><br><span class="line"><span class="comment">//             filter_sum += filter_buf[i];</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         printf(&quot;%d\n&quot;, filter_sum / (FILTER6_N - 1));</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法七：一阶滞后滤波法</span></span><br><span class="line"><span class="comment">方法： 取a=0-1，本次滤波结果=(1-a)*本次采样值+a*上次滤波结果。</span></span><br><span class="line"><span class="comment">优点：  对周期性干扰具有良好的抑制作用；</span></span><br><span class="line"><span class="comment">        适用于波动频率较高的场合。</span></span><br><span class="line"><span class="comment">       平滑度高，适于高频振荡的系统。</span></span><br><span class="line"><span class="comment">缺点： 相位滞后，灵敏度低；</span></span><br><span class="line"><span class="comment">      滞后程度取决于a值大小；</span></span><br><span class="line"><span class="comment">      不能消除滤波频率高于采样频率1/2的干扰信号。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define FILTER7_A 0.01</span></span><br><span class="line"><span class="comment">// unsigned short Value;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// short filter7()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int NewValue;</span></span><br><span class="line"><span class="comment">//     Value    = ftable[b - 1];</span></span><br><span class="line"><span class="comment">//     NewValue = ftable[b];</span></span><br><span class="line"><span class="comment">//     b++;</span></span><br><span class="line"><span class="comment">//     if (b == 255)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         b = 1;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     Value = (int)((float)NewValue * FILTER7_A + (1.0 - FILTER7_A) * (float)Value);</span></span><br><span class="line"><span class="comment">//     printf(&quot;%d\n&quot;, Value);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法八：加权递推平均滤波法</span></span><br><span class="line"><span class="comment">方法： 是对递推平均滤波法的改进，即不同时刻的数据加以不同的权；</span></span><br><span class="line"><span class="comment">       通常是，越接近现时刻的数据，权取得越大。</span></span><br><span class="line"><span class="comment">       给予新采样值的权系数越大，则灵敏度越高，但信号平滑度越低。</span></span><br><span class="line"><span class="comment">优点： 适用于有较大纯滞后时间常数的对象，和采样周期较短的系统。</span></span><br><span class="line"><span class="comment">缺点：  对于纯滞后时间常数较小、采样周期较长、变化缓慢的信号；</span></span><br><span class="line"><span class="comment">       不能迅速反应系统当前所受干扰的严重程度，滤波效果差。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define FILTER8_N 12</span></span><br><span class="line"><span class="comment">// int coe[FILTER8_N] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;          // 加权系数表</span></span><br><span class="line"><span class="comment">// int sum_coe        = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12; // 加权系数和</span></span><br><span class="line"><span class="comment">// int filter_buf[FILTER8_N + 1];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int filter8()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int i;</span></span><br><span class="line"><span class="comment">//     int filter_sum        = 0;</span></span><br><span class="line"><span class="comment">//     filter_buf[FILTER8_N] = ftable[a];</span></span><br><span class="line"><span class="comment">//     a++;</span></span><br><span class="line"><span class="comment">//     if (a == 254)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         a = 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     for (i = 0; i &lt; FILTER8_N; i++)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         filter_buf[i] = filter_buf[i + 1]; // 数组元素左移，将第0个元素舍弃</span></span><br><span class="line"><span class="comment">//         filter_sum += filter_buf[i] * coe[i];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     filter_sum /= sum_coe;</span></span><br><span class="line"><span class="comment">//     printf(&quot;%d\n&quot;, filter_sum);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法九： 消抖滤波法</span></span><br><span class="line"><span class="comment">方法：  设置一个滤波计数器，将每次采样值与当前有效值比较：</span></span><br><span class="line"><span class="comment">       如果采样值 = 当前有效值，则计数器清零；</span></span><br><span class="line"><span class="comment">       如果采样值 &lt; 或 &gt; 当前有效值，则计数器+1，并判断计数器是否 &gt;= 上限N（溢出）；</span></span><br><span class="line"><span class="comment">       如果计数器溢出，则将本次值替换当前有效值，并清计数器。</span></span><br><span class="line"><span class="comment">优点：  对于变化缓慢的被测参数有较好的滤波效果；</span></span><br><span class="line"><span class="comment">        可避免在临界值附近控制器的反复开/关跳动或显示器上数值抖动。</span></span><br><span class="line"><span class="comment">缺点：  对于快速变化的参数不宜；</span></span><br><span class="line"><span class="comment">       如果在计数器溢出的那一次采样到的值恰好是干扰值,则会将干扰值当作有效值导入系统。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define FILTER9_N 51</span></span><br><span class="line"><span class="comment">// unsigned short i = 0;</span></span><br><span class="line"><span class="comment">// unsigned short Value;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// short filter9()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int new_value;</span></span><br><span class="line"><span class="comment">//     Value     = ftable[b - 1];</span></span><br><span class="line"><span class="comment">//     new_value = ftable[b];</span></span><br><span class="line"><span class="comment">//     b++;</span></span><br><span class="line"><span class="comment">//     if (b == 255)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         b = 1;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if (Value != new_value)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         i++;</span></span><br><span class="line"><span class="comment">//         if (i &gt; FILTER9_N)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             i     = 0;</span></span><br><span class="line"><span class="comment">//             Value = new_value;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         i = 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     printf(&quot;%d\n&quot;, Value);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************************************************************</span></span><br><span class="line"><span class="comment">方法十：限幅消抖滤波法</span></span><br><span class="line"><span class="comment">方法： 相当于“限幅滤波法”+“消抖滤波法”；</span></span><br><span class="line"><span class="comment">       先限幅，后消抖。</span></span><br><span class="line"><span class="comment">优点：  继承了“限幅”和“消抖”的优点；</span></span><br><span class="line"><span class="comment">        改进了“消抖滤波法”中的某些缺陷，避免将干扰值导入系统。</span></span><br><span class="line"><span class="comment">缺点：   对于快速变化的参数不宜。</span></span><br><span class="line"><span class="comment">******************************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define FILTER10_A 51</span></span><br><span class="line"><span class="comment">// #define FILTER10_N 5</span></span><br><span class="line"><span class="comment">// unsigned short i = 0;</span></span><br><span class="line"><span class="comment">// unsigned short Value;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// short filter10()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     unsigned short NewValue;</span></span><br><span class="line"><span class="comment">//     unsigned short new_value;</span></span><br><span class="line"><span class="comment">//     Value    = ftable[b - 1];</span></span><br><span class="line"><span class="comment">//     NewValue = ftable[b];</span></span><br><span class="line"><span class="comment">//     b++;</span></span><br><span class="line"><span class="comment">//     if (b == 255)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         b = 1;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if (((NewValue - Value) &gt; FILTER10_A) || ((Value - NewValue) &gt; FILTER10_A))</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         new_value = Value;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         new_value = NewValue;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if (Value != new_value)</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         i++;</span></span><br><span class="line"><span class="comment">//         if (i &gt; FILTER10_N)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             i     = 0;</span></span><br><span class="line"><span class="comment">//             Value = new_value;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//         i = 0;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     printf(&quot;%d\n&quot;, Value);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief     主函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// filter1();</span></span><br><span class="line">        <span class="comment">// filter2();</span></span><br><span class="line">        <span class="comment">// filter3();</span></span><br><span class="line">        <span class="comment">// filter4();</span></span><br><span class="line">        <span class="comment">// filter5();</span></span><br><span class="line">        <span class="comment">// filter6();</span></span><br><span class="line">        <span class="comment">// filter7();</span></span><br><span class="line">        <span class="comment">// filter8();</span></span><br><span class="line">        <span class="comment">// filter9();</span></span><br><span class="line">        <span class="comment">// filter10();</span></span><br><span class="line">        Sleep(<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="程序顺序执行、定时器任务执行及各种RTOS的优缺点及原理"><a href="#程序顺序执行、定时器任务执行及各种RTOS的优缺点及原理" class="headerlink" title="程序顺序执行、定时器任务执行及各种RTOS的优缺点及原理"></a>程序顺序执行、定时器任务执行及各种RTOS的优缺点及原理</h2><h3 id="程序顺序执行优缺点"><a href="#程序顺序执行优缺点" class="headerlink" title="程序顺序执行优缺点"></a>程序顺序执行优缺点</h3><p><strong>顺序执行：</strong>是指程序按照代码的书写顺序依次执行，每个任务必须等待前面的任务执行完成后才能执行。这种执行方式简单明了，<strong>易于理解和调试</strong>，但<strong>执行效率相对较低</strong>，因为程序需要等待前面的任务完成后才能开始执行下一个任务。</p>
<p><strong>并发执行：</strong>是指程序中的多个任务可以同时执行，不必等待前面的任务完成。这种执行方式可以<strong>提高执行效率</strong>，<strong>充分利用计算机的资源</strong>，但也<strong>会带来一些问题，如竞争条件、死锁等</strong>。</p>
<p><strong>程序顺序执行的特征主要包括顺序性、封闭性、可再现性、可控制性、自上而下、确定性：</strong></p>
<p><strong>顺序性：</strong>程序按照编写的顺序一步一步地执行，每一步完成后才能进入下一步，直到程序执行完毕。这一特征确保了程序执行的顺序性，即程序的操作严格按照程序所规定的顺序执行，每个操作必须在下一操作开始之前结束。</p>
<p><strong>封闭性：</strong>程序在封闭的环境下执行，即程序运行时独占全机资源，资源的状态（除初始状态外）只有本程序才能改变它。程序一旦开始执行，其执行结果不受外界因素影响。</p>
<p><strong>可再现性：</strong>程序的顺序执行是可重复的，即每次执行都按照相同的顺序和方式执行，结果也应该是相同的。只要程序执行时的环境和初始条件相同，当程序重复执行时，无论它是从头到尾不停顿地执行，还是“停停走走”地执行，都将获得相同的结果。</p>
<p><strong>可控制性：</strong>程序的顺序执行是可控制的，即可以通过程序中的控制语句（如条件语句、循环语句）来改变程序的执行顺序和方式。</p>
<p><strong>自上而下：</strong>程序的顺序执行是自上而下的，即从程序的第一行开始执行，直到最后一行结束。</p>
<p><strong>确定性：</strong>程序执行的结果与它的执行过程无关。换言之，就是程序无论是从头到尾地执行，还是“停停走走”地执行，都不会影响所得结果。</p>
<h3 id="定时器任务执行的优缺点"><a href="#定时器任务执行的优缺点" class="headerlink" title="定时器任务执行的优缺点"></a>定时器任务执行的优缺点</h3><p>定时器的工作原理是基于时序控制的模块，它的作用是按照程序预定的时序点，定时触发动作，从而起到程序控制的作用，它可以按照一定的时序，定时触发某些事件</p>
<p><strong>优点：</strong></p>
<ol>
<li>可以增加程序的灵活性</li>
<li>可以降低程序的复杂度（可以用它来控制单片机的某些动作，这样可以减少程序中的指令数）</li>
<li>可以提高程序的稳定性（它可以按照一定的时序触发某些事件，从而提高程序的可靠性）</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>容易出现程序错误（它可以按照一定的时序触发某些事件，但是这种触发事件可能会出现误差，从而导致程序错误）</li>
<li>会降低单片机的运行效率（按照一定的时序编程会占用一定的单片机处理时间，从而降低单片机的运行效率）</li>
</ol>
<p><strong>主要用途：</strong></p>
<ol>
<li><p>延时调节：可以用来对某种设备进行延时调节，控制某种设备的工作时间，从而达到控制设备的效果</p>
</li>
<li><p>定时控制：可以用来定时控制多种设备，按照一定的时序控制设备，从而获得更加精确的控制效果</p>
</li>
<li><p>事件触发：可以触发某种事件，按照一定的时序触发某种事件，从而达到控制程序的作用</p>
</li>
<li><p>系统调度：可以用来调度系统的操作，按照一定的时序来进行系统的调度控制，从而达到最佳的操作效果</p>
</li>
</ol>
<h3 id="RTOS的优缺点"><a href="#RTOS的优缺点" class="headerlink" title="RTOS的优缺点"></a>RTOS的优缺点</h3><p><strong>RTOS</strong>，全称 Real-Time Operating System ，即 <strong>实时操作系统</strong>。它是一种专门用于实时系统的操作系统，主要目的是提供及时响应和高可靠性。RTOS的核心在于其任务调度功能，它能严格按照优先级分配CPU时间片，确保实时任务得到及时处理。</p>
<p><strong>RTOS技术的概念及特点：</strong></p>
<ol>
<li>实时性：RTOS的最主要特征是对实时性的支持。它能够确保系统在规定的时间内对事件作出响应，包括硬实时系统（需要对任务响应时间进行硬性保证）和软实时系统（对任务的响应时间有一定的容忍度）。</li>
<li>任务调度：RTOS包含一个任务调度器，能够有效地管理多个任务的执行。它负责按照优先级或其他调度算法，决定哪个任务在何时执行。</li>
<li>任务管理：RTOS提供任务管理功能，允许开发者创建、删除、挂起和恢复任务。任务是系统中的基本执行单元，可以看作是一个独立的线程。</li>
<li>中断服务例程： RTOS通常支持中断服务例程，以处理来自外部设备或其他任务的中断请求。中断服务例程是一段能够在中断事件发生时迅速执行的代码。</li>
<li>实时时钟：RTOS提供实时时钟服务，用于测量和记录时间，帮助任务和事件的时间同步。</li>
<li>同步和通信机制：为了实现任务之间的合作和通信，RTOS提供了同步和通信机制，如信号量、消息队列、互斥锁等。</li>
<li>资源管理：RTOS能够有效地管理和分配系统资源，包括内存、外设等，以确保任务能够按照预期的方式协同工作。</li>
<li>可裁剪性：RTOS通常具有可裁剪的特性，允许用户根据具体应用的需求选择性地启用或禁用某些功能，以减小系统的开销。</li>
</ol>
<p><strong>优点：</strong></p>
<ol>
<li>系统结构更清晰：当代码量较大时，RTOS会提供一个稳定的、结构清晰的框架，方便后续的开发与维护。</li>
<li>模块化和高内聚：使用RTOS写任务可以做到更加模块化，高内聚，低耦合，有利于代码的学习和技术提升。</li>
<li>中间件丰富：RTOS中间件比较多，可以方便移植使用，减少开发者的工作量。</li>
<li>趋势和适应性：随着32位CPU市场的扩大，RTOS的使用也成为一个趋势，尤其在一些特定的行业如工控、医疗、航空军工等，RTOS的强实时性和高稳定性使其更具优势。</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>资源开销：RTOS本身会占用一些系统资源，包括内存和处理器时间。</li>
<li>学习曲线：学习RTOS可能需要一些时间，特别是对于初学者。</li>
<li>不适用于所有应用：对于一些简单的嵌入式应用，引入RTOS可能会显得过于庞大和不必要。</li>
</ol>
<p><strong>RTOS与裸机如何选择：</strong></p>
<ol>
<li>实时性需求： 如果系统对实时性能要求较高，特别是在响应时间上有硬性要求，RTOS可能更为适用。</li>
<li>开发周期：对于较为简单的项目，裸机开发可能更快速。</li>
<li>复杂性：如果项目较为复杂，多任务、同步和通信需求较多，RTOS可能提供更好的抽象和管理。</li>
<li>资源约束：如果系统资源有限，裸机开发可能更为合适，因为RTOS本身会占用一些额外的资源。</li>
</ol>
<h2 id="IIC"><a href="#IIC" class="headerlink" title="IIC"></a>IIC</h2><h3 id="模拟iic和硬件iic区别"><a href="#模拟iic和硬件iic区别" class="headerlink" title="模拟iic和硬件iic区别"></a>模拟iic和硬件iic区别</h3><p><strong>I2C协议可以被模拟和硬件实现：</strong><br>模拟I2C是用两条GPIO（General Purpose Input Output）管脚的软件模拟的，将一个GPIO设置为数据线SDA，另外一个设置为时钟线SCL。<br>硬件I2C则是通过一个I2C控制器实现的，该控制器被建立在微控制器芯片或单独的I2C芯片中，通过集成的硬件内部逻辑和电路来控制时序和数据格式，实现I2C总线通信。</p>
<p>I2C协议传输时分为两类线，一类为时钟线SCL，另一类为数据线SDA。时钟线由主节点产生，用于同步数据传输，数据线用于传输真正的数据。</p>
<p>模拟I2C的主要限制是不能在高速模式下运行，并且有可能出现线路噪音、误码等问题。<br>硬件I2C通信更加可靠，并且具有更高的性能。</p>
<p>硬件控制器内置在微控制器芯片或者单独的I2C芯片中，在控制器的支持下，可以实现高速数据传输，避免了SCL和SDA之间的相互影响。此外，在硬件I2C中，处理信号和协议的复杂算法已经内置在控制器中，不需要用户自己实现，简化了通信过程，提高了可靠性。</p>
<p>软件I2C作为一个模拟方法，还存在另一个重要的缺点就是不同于硬件I2C，模拟I2C的芯片在同时进行通信时需要耗费大量的CPU资源，对内存和处理器速度的要求更高。<br>反过来，硬件I2C通常可以在任何操作系统和平台上轻松使用，这种通信协议不需要使用大量的额外的内存或处理器周期。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C写SCL引脚电平</span></span><br><span class="line"><span class="comment"> * 参    数：BitValue 协议层传入的当前需要写入SCL的电平，范围0~1</span></span><br><span class="line"><span class="comment"> * 返 回 值：无</span></span><br><span class="line"><span class="comment"> * 注意事项：此函数需要用户实现内容，当BitValue为0时，需要置SCL为低电平，当BitValue为1时，需要置SCL为高电平</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyI2C_W_SCL</span><span class="params">(<span class="type">uint8_t</span> BitValue)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_WriteBit(GPIOB, GPIO_Pin_10, (BitAction)BitValue); <span class="comment">// 根据BitValue，设置SCL引脚的电平</span></span><br><span class="line">    Delay_us(<span class="number">10</span>);                                           <span class="comment">// 延时10us，防止时序频率超过要求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C写SDA引脚电平</span></span><br><span class="line"><span class="comment"> * 参    数：BitValue 协议层传入的当前需要写入SDA的电平，范围0~0xFF</span></span><br><span class="line"><span class="comment"> * 返 回 值：无</span></span><br><span class="line"><span class="comment"> * 注意事项：此函数需要用户实现内容，当BitValue为0时，需要置SDA为低电平，当BitValue非0时，需要置SDA为高电平</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyI2C_W_SDA</span><span class="params">(<span class="type">uint8_t</span> BitValue)</span></span><br><span class="line">&#123;</span><br><span class="line">    GPIO_WriteBit(GPIOB, GPIO_Pin_11, (BitAction)BitValue); <span class="comment">// 根据BitValue，设置SDA引脚的电平，BitValue要实现非0即1的特性</span></span><br><span class="line">    Delay_us(<span class="number">10</span>);                                           <span class="comment">// 延时10us，防止时序频率超过要求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C读SDA引脚电平</span></span><br><span class="line"><span class="comment"> * 参    数：无</span></span><br><span class="line"><span class="comment"> * 返 回 值：协议层需要得到的当前SDA的电平，范围0~1</span></span><br><span class="line"><span class="comment"> * 注意事项：此函数需要用户实现内容，当前SDA为低电平时，返回0，当前SDA为高电平时，返回1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MyI2C_R_SDA</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> BitValue;</span><br><span class="line">    BitValue = GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_11); <span class="comment">// 读取SDA电平</span></span><br><span class="line">    Delay_us(<span class="number">10</span>);                                         <span class="comment">// 延时10us，防止时序频率超过要求</span></span><br><span class="line">    <span class="keyword">return</span> BitValue;                                      <span class="comment">// 返回SDA电平</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C初始化</span></span><br><span class="line"><span class="comment"> * 参    数：无</span></span><br><span class="line"><span class="comment"> * 返 回 值：无</span></span><br><span class="line"><span class="comment"> * 注意事项：此函数需要用户实现内容，实现SCL和SDA引脚的初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyI2C_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*开启时钟*/</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="comment">// 开启GPIOB的时钟</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*GPIO初始化*/</span></span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;</span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">    GPIO_Init(GPIOB, &amp;GPIO_InitStructure); <span class="comment">// 将PB10和PB11引脚初始化为开漏输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*设置默认电平*/</span></span><br><span class="line">    GPIO_SetBits(GPIOB, GPIO_Pin_10 | GPIO_Pin_11); <span class="comment">// 设置PB10和PB11引脚初始化后默认为高电平（释放总线状态）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*协议层*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C起始</span></span><br><span class="line"><span class="comment"> * 参    数：无</span></span><br><span class="line"><span class="comment"> * 返 回 值：无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyI2C_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MyI2C_W_SDA(<span class="number">1</span>); <span class="comment">// 释放SDA，确保SDA为高电平</span></span><br><span class="line">    MyI2C_W_SCL(<span class="number">1</span>); <span class="comment">// 释放SCL，确保SCL为高电平</span></span><br><span class="line">    MyI2C_W_SDA(<span class="number">0</span>); <span class="comment">// 在SCL高电平期间，拉低SDA，产生起始信号</span></span><br><span class="line">    MyI2C_W_SCL(<span class="number">0</span>); <span class="comment">// 起始后把SCL也拉低，即为了占用总线，也为了方便总线时序的拼接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C终止</span></span><br><span class="line"><span class="comment"> * 参    数：无</span></span><br><span class="line"><span class="comment"> * 返 回 值：无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyI2C_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MyI2C_W_SDA(<span class="number">0</span>); <span class="comment">// 拉低SDA，确保SDA为低电平</span></span><br><span class="line">    MyI2C_W_SCL(<span class="number">1</span>); <span class="comment">// 释放SCL，使SCL呈现高电平</span></span><br><span class="line">    MyI2C_W_SDA(<span class="number">1</span>); <span class="comment">// 在SCL高电平期间，释放SDA，产生终止信号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C发送一个字节</span></span><br><span class="line"><span class="comment"> * 参    数：Byte 要发送的一个字节数据，范围：0x00~0xFF</span></span><br><span class="line"><span class="comment"> * 返 回 值：无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyI2C_SendByte</span><span class="params">(<span class="type">uint8_t</span> Byte)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) <span class="comment">// 循环8次，主机依次发送数据的每一位</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyI2C_W_SDA(Byte &amp; (<span class="number">0x80</span> &gt;&gt; i)); <span class="comment">// 使用掩码的方式取出Byte的指定一位数据并写入到SDA线</span></span><br><span class="line">        MyI2C_W_SCL(<span class="number">1</span>);                  <span class="comment">// 释放SCL，从机在SCL高电平期间读取SDA</span></span><br><span class="line">        MyI2C_W_SCL(<span class="number">0</span>);                  <span class="comment">// 拉低SCL，主机开始发送下一位数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C接收一个字节</span></span><br><span class="line"><span class="comment"> * 参    数：无</span></span><br><span class="line"><span class="comment"> * 返 回 值：接收到的一个字节数据，范围：0x00~0xFF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MyI2C_ReceiveByte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i, Byte = <span class="number">0x00</span>; <span class="comment">// 定义接收的数据，并赋初值0x00，此处必须赋初值0x00，后面会用到</span></span><br><span class="line">    MyI2C_W_SDA(<span class="number">1</span>);         <span class="comment">// 接收前，主机先确保释放SDA，避免干扰从机的数据发送</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) <span class="comment">// 循环8次，主机依次接收数据的每一位</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyI2C_W_SCL(<span class="number">1</span>); <span class="comment">// 释放SCL，主机在SCL高电平期间读取SDA</span></span><br><span class="line">        <span class="keyword">if</span> (MyI2C_R_SDA() == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Byte |= (<span class="number">0x80</span> &gt;&gt; i);</span><br><span class="line">        &#125; <span class="comment">// 读取SDA数据，并存储到Byte变量</span></span><br><span class="line">          <span class="comment">// 当SDA为1时，置变量指定位为1，当SDA为0时，不做处理，指定位为默认的初值0</span></span><br><span class="line">        MyI2C_W_SCL(<span class="number">0</span>); <span class="comment">// 拉低SCL，从机在SCL低电平期间写入SDA</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Byte; <span class="comment">// 返回接收到的一个字节数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C发送应答位</span></span><br><span class="line"><span class="comment"> * 参    数：Byte 要发送的应答位，范围：0~1，0表示应答，1表示非应答</span></span><br><span class="line"><span class="comment"> * 返 回 值：无</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyI2C_SendAck</span><span class="params">(<span class="type">uint8_t</span> AckBit)</span></span><br><span class="line">&#123;</span><br><span class="line">    MyI2C_W_SDA(AckBit); <span class="comment">// 主机把应答位数据放到SDA线</span></span><br><span class="line">    MyI2C_W_SCL(<span class="number">1</span>);      <span class="comment">// 释放SCL，从机在SCL高电平期间，读取应答位</span></span><br><span class="line">    MyI2C_W_SCL(<span class="number">0</span>);      <span class="comment">// 拉低SCL，开始下一个时序模块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函    数：I2C接收应答位</span></span><br><span class="line"><span class="comment"> * 参    数：无</span></span><br><span class="line"><span class="comment"> * 返 回 值：接收到的应答位，范围：0~1，0表示应答，1表示非应答</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">MyI2C_ReceiveAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> AckBit;         <span class="comment">// 定义应答位变量</span></span><br><span class="line">    MyI2C_W_SDA(<span class="number">1</span>);         <span class="comment">// 接收前，主机先确保释放SDA，避免干扰从机的数据发送</span></span><br><span class="line">    MyI2C_W_SCL(<span class="number">1</span>);         <span class="comment">// 释放SCL，主机机在SCL高电平期间读取SDA</span></span><br><span class="line">    AckBit = MyI2C_R_SDA(); <span class="comment">// 将应答位存储到变量里</span></span><br><span class="line">    MyI2C_W_SCL(<span class="number">0</span>);         <span class="comment">// 拉低SCL，开始下一个时序模块</span></span><br><span class="line">    <span class="keyword">return</span> AckBit;          <span class="comment">// 返回定义应答位变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>根据传输的位来拉<code>SCL</code>与<code>SDA</code>线电平：若该位为1，则拉高<code>SCL</code>与<code>SDA</code>线电平，否则就拉低</li>
<li><code>SCL</code>与<code>SDA</code>需默认<strong>拉高</strong>，以<strong>释放总线状态</strong>，准备好传输数据</li>
<li>IIC起始信号：<code>SCL</code>高电平，<code>SDA</code>下降沿<strong>（注：起始后需把SCL也拉低，使主机占用总线准备发送数据）</strong>；IIC结束信号：<code>SCL</code>高电平，<code>SDA</code>上升沿；</li>
<li>主机发送：每次发送1位，循环8次即可发送一个字节；在发送数据时，应先拉高<code>SCL</code>（从机在<code>SCL</code>高电平期间读取<code>SDA</code>），再拉低<code>SCL</code>（主机开始发送下一位数据）</li>
<li>从机接收：在接收前，应先拉高<code>SDA</code>，避免主机抢占<code>SDA</code>，导致数据出错；为存储接收到的数据，需拉高<code>SCL</code>，使主机在<code>SCL</code>高电平期间读取<code>SDA</code>，每读取一位就存入提前申请好的变量中；读完后即可得到一个字节的数据。然后拉低<code>SCL</code>，使从机可写入<code>SDA</code>，这样即可实现从机发送。</li>
<li>应答信号：主机把应答位数据放到<code>SDA</code>线；然后先拉高<code>SCL</code>，以读取应答位；再拉低<code>SCL</code>，开始下一个时序模块；</li>
</ol>
<h2 id="有刷电机的驱动方式，转速调节；频率对转速和电流的影响"><a href="#有刷电机的驱动方式，转速调节；频率对转速和电流的影响" class="headerlink" title="有刷电机的驱动方式，转速调节；频率对转速和电流的影响"></a>有刷电机的驱动方式，转速调节；频率对转速和电流的影响</h2><h3 id="有刷电机转动原理"><a href="#有刷电机转动原理" class="headerlink" title="有刷电机转动原理"></a>有刷电机转动原理</h3><p><strong>组成：定子、转子、电刷、换向器</strong></p>
<p><strong>原理：</strong>外接电源给电机通电，电流经过电刷流向与换向器连接的线圈（转子），电流流过线圈产生磁场；产生的磁场与定子磁场互斥，则转子转动；</p>
<p>转子转动半圈后若无外力，由于转子磁场与定子磁场同性相吸，则趋于稳定，不再转动；但由于换向器的存在导致线圈中电流流向与之前相反（因为换向器位置与之前相反，而换向器与线圈相连，故线圈中电流流向与之前相反），故而又与此刻的定子磁场互斥，又使转子转动；</p>
<p>以上步骤不停循环就导致转子持续转动。</p>
<h3 id="有刷电机转速受哪些因素影响"><a href="#有刷电机转速受哪些因素影响" class="headerlink" title="有刷电机转速受哪些因素影响"></a>有刷电机转速受哪些因素影响</h3><p>电压、负载、磁通量等；其中，电压与电流是影响电机转速为重要的因素</p>
<h3 id="如何调节有刷电机转速"><a href="#如何调节有刷电机转速" class="headerlink" title="如何调节有刷电机转速"></a>如何调节有刷电机转速</h3><ol>
<li>调节电压，有刷电机的转速与电压成正比，因此可以通过调节电压来改变电机的转速。但是需要注意，过高或过低的电压都会对电机造成损害，因此需要根据电机的额定电压来调节电压。</li>
<li>调节电流，电机的转速还与其所受的负载有关，因此可以通过调节电流来改变电机的转速。增加电流可以提高电机的转速，但是需要注意电机的额定电流，避免电机过载。</li>
<li>更换齿轮更换不同大小的齿轮可以改变电机的输出转速。一般来说，大齿轮可以降低电机的转速，小齿轮则可以提高电机的转速。</li>
<li>调节磁通量调节磁通量也可以影响电机的转速。增加磁通量可以提高电机的转速，但是需要注意电机的磁通量和饱和磁通量，以避免电机工作不稳定或过载。</li>
</ol>
<h3 id="频率对转速和电流的影响"><a href="#频率对转速和电流的影响" class="headerlink" title="频率对转速和电流的影响"></a>频率对转速和电流的影响</h3><p>增加频率会增加转速</p>
<h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> ADC_Table[<span class="number">101</span>] = &#123;</span><br><span class="line">    <span class="number">3999</span>,</span><br><span class="line">    <span class="number">3967</span>, <span class="number">3961</span>, <span class="number">3954</span>, <span class="number">3947</span>, <span class="number">3940</span>, <span class="number">3932</span>, <span class="number">3924</span>, <span class="number">3916</span>, <span class="number">3907</span>, <span class="number">3899</span>,</span><br><span class="line">    <span class="number">3889</span>, <span class="number">3880</span>, <span class="number">3870</span>, <span class="number">3860</span>, <span class="number">3850</span>, <span class="number">3839</span>, <span class="number">3827</span>, <span class="number">3816</span>, <span class="number">3804</span>, <span class="number">3791</span>,</span><br><span class="line">    <span class="number">3779</span>, <span class="number">3766</span>, <span class="number">3752</span>, <span class="number">3738</span>, <span class="number">3724</span>, <span class="number">3708</span>, <span class="number">3693</span>, <span class="number">3676</span>, <span class="number">3660</span>, <span class="number">3643</span>,</span><br><span class="line">    <span class="number">3625</span>, <span class="number">3607</span>, <span class="number">3589</span>, <span class="number">3570</span>, <span class="number">3550</span>, <span class="number">3530</span>, <span class="number">3510</span>, <span class="number">3489</span>, <span class="number">3468</span>, <span class="number">3446</span>,</span><br><span class="line">    <span class="number">3424</span>, <span class="number">3401</span>, <span class="number">3378</span>, <span class="number">3354</span>, <span class="number">3330</span>, <span class="number">3306</span>, <span class="number">3281</span>, <span class="number">3255</span>, <span class="number">3229</span>, <span class="number">3203</span>,</span><br><span class="line">    <span class="number">3175</span>, <span class="number">3146</span>, <span class="number">3117</span>, <span class="number">3088</span>, <span class="number">3058</span>, <span class="number">3028</span>, <span class="number">2997</span>, <span class="number">2966</span>, <span class="number">2935</span>, <span class="number">2903</span>,</span><br><span class="line">    <span class="number">2871</span>, <span class="number">2839</span>, <span class="number">2806</span>, <span class="number">2774</span>, <span class="number">2741</span>, <span class="number">2707</span>, <span class="number">2674</span>, <span class="number">2640</span>, <span class="number">2607</span>, <span class="number">2573</span>,</span><br><span class="line">    <span class="number">2539</span>, <span class="number">2505</span>, <span class="number">2471</span>, <span class="number">2436</span>, <span class="number">2402</span>, <span class="number">2368</span>, <span class="number">2334</span>, <span class="number">2300</span>, <span class="number">2265</span>, <span class="number">2231</span>,</span><br><span class="line">    <span class="number">2197</span>, <span class="number">2163</span>, <span class="number">2130</span>, <span class="number">2096</span>, <span class="number">2063</span>, <span class="number">2028</span>, <span class="number">1993</span>, <span class="number">1959</span>, <span class="number">1925</span>, <span class="number">1891</span>,</span><br><span class="line">    <span class="number">1857</span>, <span class="number">1823</span>, <span class="number">1790</span>, <span class="number">1758</span>, <span class="number">1725</span>, <span class="number">1693</span>, <span class="number">1661</span>, <span class="number">1630</span>, <span class="number">1599</span>, <span class="number">1580</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief       查询ADC对应温度</span></span><br><span class="line"><span class="comment"> * @param[1]    arr ADC数组</span></span><br><span class="line"><span class="comment"> * @param[2]    left right 数组的首末下标</span></span><br><span class="line"><span class="comment"> * @param[3]    x 实时获取的ADC值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">adc_search</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">short</span>* arr, <span class="type">unsigned</span> <span class="type">char</span> left, <span class="type">unsigned</span> <span class="type">char</span> right, <span class="type">unsigned</span> <span class="type">short</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= arr[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= arr[<span class="number">100</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt;= x &amp;&amp; arr[mid + <span class="number">1</span>] &lt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">adc_search(ADC_Table, <span class="number">0</span>, <span class="number">100</span>, ntc_adc);</span><br></pre></td></tr></table></figure>

<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li>二分法为什么会陷入死循环？</li>
</ol>
<p>判断条件选取的不对，多一个 <code>=</code> 就有可能陷入死循环；另外数组最好为<strong>单数</strong>，双数极可能陷入死循环</p>
<ol start="2">
<li>为什么 <code>while (left &lt;= right)</code> 用 <code>&lt;= </code> 不用  <code>&lt; </code> ？</li>
</ol>
<p>因为 <code>right</code> 的值为 <code>数组元素个数 - 1</code> ，这时 <code>left</code> 与 <code>right</code> 是可以相等的</p>
<ol start="3">
<li>为什么取中间数要写成 <code>int mid = left + (right - left) / 2;</code> 这样？</li>
</ol>
<p>因为若 <code>left + right</code> 很大的时候会发生整形溢出，这样写可以尽量避免</p>
<ol start="4">
<li>为什么判断条件写成 <code>if (arr[mid] &gt;= x &amp;&amp; arr[mid + 1] &lt;= x)</code> 这样？</li>
</ol>
<p>因为数组元素为 <code>unsigned short</code> 型，不会出现浮点数，且数组元素不是等差为1的等差数列，不是非此即彼，可能会出现 <code>arr[mid] &gt;= x &amp;&amp; arr[mid + 1] &lt;= x</code> 这种情况</p>
<ol start="5">
<li>建议：遇到死循环将 <code>left</code> <code>right</code> <code>mid</code> 打印出来看看</li>
</ol>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUEUE_SIZE 50</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="built_in">queue</span>[QUEUE_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> head = <span class="number">0</span>; <span class="comment">// 队头出</span></span><br><span class="line"><span class="type">int</span> tail = <span class="number">0</span>; <span class="comment">// 队尾进</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_queue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="number">0</span>;</span><br><span class="line">    tail = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enqueue</span><span class="params">(<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((tail + <span class="number">1</span>) % QUEUE_SIZE == head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;QUEUE IS FULL!\n&quot;</span>); <span class="comment">// 队满</span></span><br><span class="line">        init_queue(); <span class="comment">// 队头、队尾清零；重新开始，即循环队列</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">queue</span>[tail] = value;</span><br><span class="line">    tail = (tail + <span class="number">1</span>) % QUEUE_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dequeue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;QUEUE IS EMPTY!\n&quot;</span>); <span class="comment">// 队空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">queue</span>[head];</span><br><span class="line">    <span class="built_in">queue</span>[head] = <span class="number">0</span>;</span><br><span class="line">    head = (head + <span class="number">1</span>) % QUEUE_SIZE;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = head;</span><br><span class="line">    <span class="keyword">while</span> (i != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">queue</span>[i]);</span><br><span class="line">        i = (i + <span class="number">1</span>) % QUEUE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        enqueue(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printQueue(); <span class="comment">// QUEUE IS FULL!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">49</span>; i &lt; <span class="number">98</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        enqueue(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printQueue(); <span class="comment">// 49 ~ 98</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ol>
<li>队列（数组）的长度一般都要比要存入的数据长度大不少</li>
<li>使用该操作，队列（数组）的最后一个元素不会被使用，这就是第一点的原因</li>
</ol>
<h2 id="六轴陀螺仪工作原理，数据处理"><a href="#六轴陀螺仪工作原理，数据处理" class="headerlink" title="六轴陀螺仪工作原理，数据处理"></a>六轴陀螺仪工作原理，数据处理</h2><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><blockquote>
<p>参考：<a href="https://blog.csdn.net/propor/article/details/136938863">https://blog.csdn.net/propor/article/details/136938863</a></p>
</blockquote>
<h2 id="锂电池充放电原理"><a href="#锂电池充放电原理" class="headerlink" title="锂电池充放电原理"></a>锂电池充放电原理</h2><h3 id="锂电池充电有四个阶段"><a href="#锂电池充电有四个阶段" class="headerlink" title="锂电池充电有四个阶段"></a>锂电池充电有四个阶段</h3><p>涓流充电、恒流充电、恒压充电、充电结束</p>
<p>充电初期采用恒流充电，电池电压增加，当到达一定值后，再采用恒压充电，电流逐渐降低，直到到达设定值，完成充电过程。</p>
<h4 id="阶段1：涓流充电"><a href="#阶段1：涓流充电" class="headerlink" title="阶段1：涓流充电"></a>阶段1：涓流充电</h4><p>涓流充电用来先对<strong>完全放电</strong>的电池单元进行预充  —  恢复性充电。</p>
<p>在电池电压低于满电电压时，先采用最大xxc（一般为0.1C）的恒定电流对电池进行充电。</p>
<p>0.1C即 恒流充电电流的十分之一</p>
<h4 id="阶段2：恒流充电"><a href="#阶段2：恒流充电" class="headerlink" title="阶段2：恒流充电"></a>阶段2：恒流充电</h4><p>当电池电压上升到涓流充电阈值以上时，提高充电电流进行恒流充电。</p>
<p>恒流充电的电流一般在0.2C至 1.0C之间。恒流充电时的电流并不要求十分精确，准恒定电流也可以。</p>
<h4 id="阶段3：恒压充电"><a href="#阶段3：恒压充电" class="headerlink" title="阶段3：恒压充电"></a>阶段3：恒压充电</h4><p>当电池电压上升到满电电压时，恒流充电结束，开始恒压充电阶段。</p>
<h4 id="阶段4：充电终止"><a href="#阶段4：充电终止" class="headerlink" title="阶段4：充电终止"></a>阶段4：充电终止</h4><p>充电结束</p>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu服务器部署FRP内网穿透</title>
    <url>/archives/2bb50ac9.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于有给服务器传文件的需求，又没有FTP，就想着先给服务器装个FRP内网穿透；就百度了一下，结果好几天也没成功，后来又不甘心，又继续搞，终于有结果了，记录一下。</p>
<span id="more"></span>

<h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h2><ul>
<li>安装 vsftpd</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>

<ul>
<li>配置 vsftpd</li>
</ul>
<p>vsftpd的配置文件默认位于 <code>/etc/vsftpd.conf</code>下，我们编辑一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>配置以下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Example config file /etc/vsftpd.conf</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The default compiled in settings are fairly paranoid. This sample file</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">loosens things up a bit, to make the ftp daemon more usable.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please see vsftpd.conf.5 <span class="keyword">for</span> all compiled <span class="keyword">in</span> defaults.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Please <span class="built_in">read</span> the vsftpd.conf.5 manual page to get a full idea of vsftpd<span class="string">&#x27;s</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">capabilities.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Run standalone?  vsftpd can run either from an inetd or as a standalone</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">daemon started from an initscript.</span></span></span><br><span class="line">listen=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This directive enables listening on IPv6 sockets. By default, listening</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on the IPv6 &quot;any&quot; address (::) will accept connections from both IPv6</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">sockets. If you want that (perhaps because you want to listen on specific</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">addresses) then you must run two copies of vsftpd with two configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">files.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">listen_ipv6=YES</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Allow anonymous FTP? (Disabled by default).</span></span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Uncomment this to allow local users to log in.</span></span></span><br><span class="line">local_enable=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Uncomment this to enable any form of FTP write command.</span></span></span><br><span class="line">write_enable=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Default umask for local users is 077. You may wish to change this to 022,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if your users expect that (022 is used by most other ftpd&#x27;</span>s)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">local_umask=022</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">has an effect <span class="keyword">if</span> the above global write <span class="built_in">enable</span> is activated. Also, you will</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">obviously need to create a directory writable by the FTP user.</span></span><br><span class="line">anon_upload_enable=NO</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Uncomment this if you want the anonymous FTP user to be able to create</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">new directories.</span></span><br><span class="line">anon_mkdir_write_enable=NO</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Activate directory messages - messages given to remote users when they</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">go into a certain directory.</span></span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If enabled, vsftpd will display directory listings with the time</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span>  your  <span class="built_in">local</span>  time  zone.  The default is to display GMT. The</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">times</span> returned by the MDTM FTP <span class="built_in">command</span> are also affected by this</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">option.</span></span><br><span class="line">use_localtime=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Activate logging of uploads/downloads.</span></span></span><br><span class="line">xferlog_enable=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></span></span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If you want, you can arrange for uploaded anonymous files to be owned by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a different user. Note! Using <span class="string">&quot;root&quot;</span> <span class="keyword">for</span> uploaded files is not</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">recommended!</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chown_uploads=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">chown_username=whoever</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You may override where the log file goes if you like. The default is shown</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">below.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">xferlog_file=/var/log/vsftpd.log</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If you want, you can have your log file in standard ftpd xferlog format.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note that the default <span class="built_in">log</span> file location is /var/log/xferlog <span class="keyword">in</span> this <span class="keyword">case</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">xferlog_std_format=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You may change the default value for timing out an idle session.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">idle_session_timeout=600</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You may change the default value for timing out a data connection.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">data_connection_timeout=120</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># It is recommended that you define on your system a unique user which the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ftp server can use as a totally isolated and unprivileged user.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">nopriv_user=ftpsecure</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">recommended <span class="keyword">for</span> security (the code is non-trivial). Not enabling it,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">however, may confuse older FTP clients.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">async_abor_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># By default the server will pretend to allow ASCII mode but in fact ignore</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the request. Turn on the below options to have the server actually <span class="keyword">do</span> ASCII</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mangling on files when <span class="keyword">in</span> ASCII mode.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Beware that on some FTP servers, ASCII support allows a denial of service</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">attack (DoS) via the <span class="built_in">command</span> <span class="string">&quot;SIZE /big/file&quot;</span> <span class="keyword">in</span> ASCII mode. vsftpd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">predicted this attack and has always been safe, reporting the size of the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">raw file.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ASCII mangling is a horrible feature of the protocol.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ascii_upload_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ascii_download_enable=YES</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You may fully customise the login banner string:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ftpd_banner=Welcome to blah FTP service.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">useful <span class="keyword">for</span> combatting certain DoS attacks.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deny_email_enable=YES</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(default follows)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">banned_email_file=/etc/vsftpd.banned_emails</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You may restrict local users to their home directories.  See the FAQ for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the possible risks <span class="keyword">in</span> this before using chroot_local_user or</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chroot_list_enable below.</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You may specify an explicit list of local users to chroot() to their home</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">directory. If chroot_local_user is YES, <span class="keyword">then</span> this list becomes a list of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">users</span> to NOT <span class="built_in">chroot</span>().</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(Warning! <span class="built_in">chroot</span><span class="string">&#x27;ing can be very dangerous. If using chroot, make sure that</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the user does not have write access to the top level directory within the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">chroot)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">chroot_local_user=YES</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">chroot_list_enable=YES</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">(default follows)</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">chroot_list_file=/etc/vsftpd.chroot_list</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># You may activate the &quot;-R&quot; option to the builtin ls. This is disabled by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">default to avoid remote users being able to cause excessive I/O on large</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">sites. However, some broken FTP clients such as &quot;ncftp&quot; and &quot;mirror&quot; assume</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the presence of the &quot;-R&quot; option, so there is a strong case for enabling it.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">ls_recurse_enable=YES</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Customization</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Some of vsftpd&#x27;</span>s settings don<span class="string">&#x27;t fit the filesystem layout by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">default.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This option should be the name of a directory which is empty.  Also, the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">directory should not be writable by the ftp user. This directory is used</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">as a secure chroot() jail at times vsftpd does not require filesystem</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">access.</span></span></span><br><span class="line">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This string is the name of the PAM service vsftpd will use.</span></span></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This option specifies the location of the RSA certificate to use for SSL</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">encrypted connections.</span></span></span><br><span class="line">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class="line">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class="line">ssl_enable=NO</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">utf8_filesystem=YES</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">local_root=/home/ftp</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">以下配置需要自己添加，否则不可用，可根据自己需求更改</span></span></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">pasv_enable=YES</span><br><span class="line">pasv_min_port=40000</span><br><span class="line">pasv_max_port=40010</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">listen_port=21</span><br><span class="line">pasv_address=101.133.132.187</span><br></pre></td></tr></table></figure>

<ul>
<li>添加用户</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo useradd -d /home/ftp/uftp -m ftpuser #此处ftpuser为添加的用户名</span><br><span class="line">sudo passwd ftpuser    #给该用户设置密码，密码不会回显，且需要输入两次</span><br><span class="line">chomd 777 /home/ftp  -R	#更改ftp文件夹的权限</span><br></pre></td></tr></table></figure>

<ul>
<li>重启 vsftpd 服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure>

<ul>
<li>防火墙设置</li>
</ul>
<p>开启对应的端口 20  21口等</p>
<ul>
<li>测试 FTP 连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ftp 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>然后输入上边设置的用户名和密码，应该会提示success，这样就连上了；接着可以试试本地电脑连接服务器ftp，<code>ftp://ip</code>，可以连上就说明成功了。</p>
<h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><p>由于，我想要其开机自启这样方便点，所以又查了查资料，记录一下。</p>
<ul>
<li>创建 systemd 服务文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure>

<ul>
<li>添加配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/www/frp/frps -c /home/www/frp/frps.ini</span><br><span class="line">Restart=always</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>上面<code>ExecStart=/home/www/frp/frps -c /home/www/frp/frps.ini</code>是我设置的路径，可以替换为你自己的。</p>
<p>其中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`/full/path/to/your/frps`: `frps` 是可执行文件的绝对路径。</span><br><span class="line">`/full/path/to/your/frps.ini`: `frps.ini`是 配置文件的绝对路径。</span><br><span class="line">`your_username`: 执行服务的用户名。</span><br><span class="line">`your_group`: 执行服务的用户组。</span><br></pre></td></tr></table></figure>

<ul>
<li>重新加载 systemd 配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<ul>
<li>设置开机自启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable frps</span><br><span class="line">sudo systemctl start frps</span><br></pre></td></tr></table></figure>

<ul>
<li>查看是否开启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl status frps //frps是上面创建的systemd服务文件的名字</span><br></pre></td></tr></table></figure>

<h2 id="结束开机自启"><a href="#结束开机自启" class="headerlink" title="结束开机自启"></a>结束开机自启</h2><p>另外，你如果需要关闭开机自启，可执行以下操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop frps	//停止frps</span><br><span class="line">sudo systemctl disable frps	//关闭开机自启</span><br><span class="line">sudo systemctl enable frps	//启用开机自启</span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>总觉得还有什么步骤忘记了，先不管，之后再说😂</p>
]]></content>
      <categories>
        <category>建站</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下不使用宝塔面板建站</title>
    <url>/archives/fe15a55f.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>恰逢国庆中秋双节放假，闲来无事，想着搞点什么玩玩；思来想去，还是写个博客吧！</p>
<p>由于之前建站都是使用的宝塔或者直接docker部署，感觉没什么进步；就想着不使用宝塔来建个站，虽然不好管理，但学习嘛，不怕困难。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>服务器</li>
<li>域名（非必须）</li>
<li>爱折腾的心</li>
</ul>
<span id="more"></span>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p><strong>更新源</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update //先更新一下源再安装，否则有可能安装不成功</span><br></pre></td></tr></table></figure>

<p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install apache2</span><br></pre></td></tr></table></figure>

<p><strong>查看apache运行状态</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl status apache2</span><br></pre></td></tr></table></figure>

<p><strong>开机自启Apache</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable apache2</span><br></pre></td></tr></table></figure>

<p><strong>修改配置文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/apache2/apache2.conf          //不会使用vi编辑器的可百度下，也不难</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory /var/www&gt;                  //这里是自己的网站目录</span><br><span class="line">	Options Indexes FollowSymLinks</span><br><span class="line">	AllowOverride None</span><br><span class="line">	Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p><strong>修改端口文件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/apache2/ports.conf</span><br></pre></td></tr></table></figure>

<p>其中 <code>Listen 80</code> 改为你想要的端口，如8080</p>
<p><strong>绑定文件夹位置对应端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/apache2/sites-available/000-default.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:8080&gt;                    //这里是你上面设置的端口号</span><br><span class="line">	ServerAdmin webmaster@localhost</span><br><span class="line">	DocumentRoot /var/www               //这里是你上面设置的目录</span><br><span class="line">	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p><strong>修改网站文件夹权限 – 给读写权限</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 775 -R /var/www              //这里必须为 -R，不可为 -r</span><br></pre></td></tr></table></figure>

<p><strong>重启Apache</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>

<p><strong>启动Apache</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start apache2</span><br></pre></td></tr></table></figure>

<p><strong>停止Apache</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>

<p><em>注：安装完毕apache并运行后如果访问不了网站，可能是因为端口未开放，开放端口即可；apache监听了80（http）与443（https）端口，需要开放这两个，此外如果你上面更改了端口号，也需将你更改过的端口开放；具体方法见下</em></p>
<h3 id="防火墙-端口"><a href="#防火墙-端口" class="headerlink" title="防火墙 - 端口"></a>防火墙 - 端口</h3><p><strong>打开防火墙端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 8080/tcp</span><br><span class="line">//即：sudo ufw allow [端口号]/[协议]</span><br></pre></td></tr></table></figure>

<p><strong>批量开放端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 20:21/tcp</span><br></pre></td></tr></table></figure>

<p><strong>关闭端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw delete allow 8080</span><br></pre></td></tr></table></figure>

<p><strong>查看开放端口</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>

<p><strong>关闭/启用所有防火墙</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ufw disable/enable</span><br></pre></td></tr></table></figure>



<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><strong>安装php8.0</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php8.0</span><br></pre></td></tr></table></figure>

<p><strong>安装时可能会报错，如下</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E: Unable to locate package php8.0</span><br><span class="line">E: Couldn&#x27;t find any package by glob &#x27;php8.0&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>依次执行以下命令</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install php8.0</span><br></pre></td></tr></table></figure>

<p><strong>检查是否安装成功</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure>

<p><strong>安装php拓展</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php8.0-mysqli </span><br><span class="line">//即：sudo apt-get install php8.0-(拓展名)</span><br></pre></td></tr></table></figure>

<p><strong>安装完成后在Apache中启用php8.0</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a2enmod php8.0</span><br></pre></td></tr></table></figure>



<h3 id="ftp服务器"><a href="#ftp服务器" class="headerlink" title="ftp服务器"></a>ftp服务器</h3><p><strong>安装</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>

<p><strong>配置 vsftpd – 具体百度</strong><br>要注意一点除了百度上设置的外，还要在 <code>vi /etc/vsftpd/vsftpd.conf</code> 中添加 <code>allow_writeable_chroot=YES</code>（读写权限），否则连接不上；至少我的情况是这样。</p>
<p><strong>启动</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start vsftpd</span><br></pre></td></tr></table></figure>

<p><strong>停止</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop vsftpd</span><br></pre></td></tr></table></figure>

<p><strong>重启</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure>

<p><strong>开机自启</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable vsftpd</span><br></pre></td></tr></table></figure>



<center>——  END ——</center>
]]></content>
      <categories>
        <category>建站</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>精确搜索之Google搜索语法大全</title>
    <url>/archives/c54b318a.html</url>
    <content><![CDATA[<h2 id="Google谷歌搜索语法大全"><a href="#Google谷歌搜索语法大全" class="headerlink" title="Google谷歌搜索语法大全"></a>Google谷歌搜索语法大全</h2><span id="more"></span>

<table>
<thead>
<tr>
<th align="center"><strong>算</strong> <strong>符</strong></th>
<th align="center"><strong>含</strong>  <strong>义</strong></th>
<th align="center"><strong>应用举例</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">AND/空格</td>
<td align="center">所连接的关键词之间是“与”的关系</td>
<td align="center">云计算 分布式计算</td>
</tr>
<tr>
<td align="center">OR/|</td>
<td align="center">所连接的关键词之间是“或”的关系</td>
<td align="center">图片 | 风景</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">所连接的关键词之间是“非”的关系</td>
<td align="center">神雕侠侣 - 游戏</td>
</tr>
<tr>
<td align="center">（）</td>
<td align="center">在检索式中括号里的运算将优先进行</td>
<td align="center">电子商务 AND (云计算 - 分布式计算)</td>
</tr>
<tr>
<td align="center">“ “</td>
<td align="center">“ “英文双引号中的内容作为一个整体被搜索，精确匹配搜索</td>
<td align="center">“智能天线”</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">通配符——星号(*)，代表完整的字词：A * B与A * * B是有区别的</td>
<td align="center">Flower * pots 与Flower * * pots</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">强制搜索一般会被自动忽略的搜索关键词，如：who、the、of、am</td>
<td align="center">+ B</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">同义符——在搜索词前使用，表示会和同时搜索相近词义的词；注：示例中会同搜元素Si</td>
<td align="center">~ silicon</td>
</tr>
<tr>
<td align="center">..</td>
<td align="center">搜索数字范围限定</td>
<td align="center">手机 价格2000..5000</td>
</tr>
<tr>
<td align="center">filetype:</td>
<td align="center">把搜索范围限定在特定文件类型中；.pdf/.doc/.docx/.ppt/.pptx/.xls/.xlsx/.rtf/.txt/.swf/.ps</td>
<td align="center">霍金 黑洞filetype: .pdf</td>
</tr>
<tr>
<td align="center">site:</td>
<td align="center">把搜索范围限定在特定站点、某一站点特定频道、特定域名后缀中</td>
<td align="center">科技 site: news.163.com</td>
</tr>
<tr>
<td align="center">inurl:</td>
<td align="center">把搜索范围限定在url链接中</td>
<td align="center">inurl: jiqiao  photoshop</td>
</tr>
<tr>
<td align="center">allinurl:</td>
<td align="center">把搜索范围限定在url链接中，只不过其后所有关键词均要在url链接中出现</td>
<td align="center">allinurl: jiqiao  photoshop</td>
</tr>
<tr>
<td align="center">intitle:</td>
<td align="center">把搜索范围限定在网页标题中</td>
<td align="center">商业 intitle: 超级女声</td>
</tr>
<tr>
<td align="center">allintitle:</td>
<td align="center">把搜索范围限定在网页标题中；只不过其后所有关键词均要在网页标题中出现</td>
<td align="center">allintitle: 超级女声 张靓颖</td>
</tr>
<tr>
<td align="center">intext:</td>
<td align="center">把搜索范围限定在网页正文中；忽略超链接文本、URL以及题目等</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">inanchor:</td>
<td align="center">把搜索范围限定在链接锚文本文字中</td>
<td align="center">inanchor: 岳飞</td>
</tr>
<tr>
<td align="center">anchor:</td>
<td align="center">检索某一作者/发明人的论著；<strong>只在Google Scholar中可用</strong></td>
<td align="center">anchor: /作者:</td>
</tr>
<tr>
<td align="center">link:</td>
<td align="center">检索所有链接到某个特定URL网址的网页；只能单独使用</td>
<td align="center">link: 163.com</td>
</tr>
<tr>
<td align="center">cache:</td>
<td align="center">Google网页快照</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">related:</td>
<td align="center">检索与某特定网页类似的网页</td>
<td align="center">related: <a href="http://www.163.com/index.shtml">www.163.com/index.shtml</a></td>
</tr>
<tr>
<td align="center">info:</td>
<td align="center">用来显示与某链接相关的一系列搜索；提供cache、similar-pages、link、related等连接</td>
<td align="center">info: <a href="http://www.sina.com.cn/">www.sina.com.cn</a></td>
</tr>
<tr>
<td align="center">Index  of</td>
<td align="center">可以帮助你寻找网络和FTP目录</td>
<td align="center">index  of mp3</td>
</tr>
<tr>
<td align="center">daterange:</td>
<td align="center">查找在一定的日期或者一定的日期范围内；只关注被Google收录的时间</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">location:</td>
<td align="center">指定地区区域内查询关键词相关的网页</td>
<td align="center">wow  gold location: France</td>
</tr>
<tr>
<td align="center">weather:</td>
<td align="center">查询该地区或城市当前的天气状况</td>
<td align="center">weather: 北京</td>
</tr>
<tr>
<td align="center">stocks:</td>
<td align="center">查询股票信息；一般源于专业财经网站</td>
<td align="center">stocks: 比亚迪</td>
</tr>
<tr>
<td align="center">define:</td>
<td align="center">返回包含查询关键词定义的网面</td>
<td align="center">define: 暗网</td>
</tr>
</tbody></table>
<p><strong>注意：</strong></p>
<p><strong>关键词与命令之间有一个空格；命令需用英文输入，包括冒号。</strong></p>
<p><strong>AND、OR、NOT均应大写，而其他算符必须是小写，虽其对检索词完全不区分大小写！</strong></p>
<blockquote>
<h3 id="Google高级搜索"><a href="#Google高级搜索" class="headerlink" title="Google高级搜索"></a>Google高级搜索</h3><p><a href="http://www.google.com.hk/advanced_search">http://www.google.com.hk/advanced_search</a>                                                   </p>
<h3 id="Google网页搜索帮助中心"><a href="#Google网页搜索帮助中心" class="headerlink" title="Google网页搜索帮助中心"></a>Google网页搜索帮助中心</h3><p><a href="https://support.google.com/websearch/?hl=zh-Hans">https://support.google.com/websearch/?hl=zh-Hans</a></p>
<h3 id="谷歌分类目录"><a href="#谷歌分类目录" class="headerlink" title="谷歌分类目录"></a>谷歌分类目录</h3><p><a href="http://directory.google.com/">http://directory.google.com/</a></p>
<p><strong>Google对于检索词中的大小写是完全不做区分的；在Google中，检索词的排序方式对于整个检索式具有重要的影响，它将首先匹配按照检索式给出的次序进行搜索。同时它也将优先匹配检索词相互邻接的网页。GOOGLE支持多达132种语言，包括简体中文和繁体中文，可以设置页面语言和搜索语言，可对汉字繁简体进行转换，可以跨语言搜索。Google搜索结果中可对搜索范围进行限制，如：网页的发布更新时间或一个时间段内，搜索结果的类型选择如图片、视频、书籍、应用程序、新闻。</strong></p>
</blockquote>
<p>PS:之前还有一篇与此文类似，<a href="https://blog.totoroweb.fun/archives/c485373b.html">点我跳转</a></p>
]]></content>
      <categories>
        <category>精确搜索</category>
      </categories>
      <tags>
        <tag>搜索技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署Docker项目</title>
    <url>/archives/db0817f.html</url>
    <content><![CDATA[<ul>
<li>拉取Alist镜像并部署</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=&quot;alist&quot; xhofe/alist:latest</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>通过日志获取默认密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs alist</span><br><span class="line">#或者</span><br><span class="line">docker exec -it alist ./alist admin</span><br></pre></td></tr></table></figure>

<ul>
<li>拉取文件快递柜镜像并部署</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always -p 12345:12345 -v /opt/FileCodeBox/:/app/data --name filecodebox lanol/filecodebox:latest</span><br></pre></td></tr></table></figure>

<p><em>如果需要修改配置，可以修改/opt/FileCodeBox/目录下的.env文件；里边包含后台地址、后台密码等</em></p>
<ul>
<li>部署Cloudreve</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull cloudreve/cloudreve</span><br><span class="line">#拉取最新Cloudreve镜像</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/cloudreve/uploads</span><br><span class="line">#在本地创建cloudreve数据卷映射目录</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name cloudreve \</span><br><span class="line">-p 4777:80 --restart=always \</span><br><span class="line">-v /data/cloudreve/uploads:/cloudreve/uploads \</span><br><span class="line">cloudreve/cloudreve:latest</span><br><span class="line">#启动cloudreve容器(4777端口，也可更换其他端口)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it cloudreve /bin/sh</span><br><span class="line">#进入cloudreve容器，需要将 conf.ini 文件中的端口设置为80才能正常访问</span><br><span class="line"></span><br><span class="line">vi conf.ini</span><br><span class="line">#修改命令，点击i键开始修改，修改完成点击Esc完成修改，输入:wq保存并退出</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart cloudreve</span><br><span class="line">#重启cloudreve容器</span><br></pre></td></tr></table></figure>

<p>用 <code>ip:端口号 </code>访问，    然后获取初始密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs cloudreve</span><br></pre></td></tr></table></figure>

<ul>
<li>青龙面板docker部署</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#docker安装</span><br><span class="line">sudo curl -sSL get.docker.com | sh</span><br><span class="line"></span><br><span class="line">#启动容器</span><br><span class="line">podman run -dit \</span><br><span class="line">  --network bridge \</span><br><span class="line">  -v $PWD/ql/data:/ql/data \</span><br><span class="line">  -p 5700:5700 \</span><br><span class="line">  --name qinglong \</span><br><span class="line">  --hostname qinglong \</span><br><span class="line">  docker.io/whyour/qinglong:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>qbittorrent</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull  lscr.io/linuxserver/qbittorrent:latest</span><br><span class="line">#拉取镜像</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/qbit  	#创建数据目录</span><br><span class="line">cd /data/qbit/  		#进入qbit目录</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=qbittorrent \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e WEBUI_PORT=8080 \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -p 6881:6881 \</span><br><span class="line">  -p 6881:6881/udp \</span><br><span class="line">  -v /data/qbit//config:/config \</span><br><span class="line">  -v /data/qbit/downloads:/downloads \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">lscr.io/linuxserver/qbittorrent:latest</span><br><span class="line">#创建qbittorrent容器</span><br></pre></td></tr></table></figure>

<p>默认用户：    User: admin    PassWord: adminadmin</p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/archives/29dc6fe8.html</url>
    <content><![CDATA[<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ul>
<li>启动容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器id               # 启动容器</span><br><span class="line">docker restart 容器id             # 重启容器</span><br><span class="line">docker start $(docker ps -a -q)  # 启动所有容器</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><ul>
<li>停止容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 容器id                # 停止当前运行的容器</span><br><span class="line">docker kill 容器id                # 强制停止当前容器</span><br><span class="line">docker stop $(docker ps -a -q)	 # 停止所有容器</span><br></pre></td></tr></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><ul>
<li>查看运行的容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">	-a   		# 查看所有容器的运行记录</span><br><span class="line">	-n=?   		# 显示最近创建的n个容器</span><br><span class="line">	-q   		# 只显示容器的id</span><br></pre></td></tr></table></figure>

<ul>
<li>查看容器运行日志</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs -tf 容器id</span><br><span class="line">docker logs --tail num 容器id   	# num为要显示的日志条数</span><br></pre></td></tr></table></figure>

<ul>
<li>查看所有镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<ul>
<li>获取容器ID</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps | grep &quot;$filename&quot; | awk &#x27;&#123;print $1&#125;&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看容器基本信息</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect   		#容器id</span><br></pre></td></tr></table></figure>



<ul>
<li>容器命名</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run --name deng_container -i -t ubuntu /bin/bash</span><br><span class="line"># 使用–name 参数，在后面加上你想为容器取的名字</span><br></pre></td></tr></table></figure>

<p><em>PS：取名注意事项：</em></p>
<p><em>1. 名字的字符是有限制的，只能使用a-z,A-Z,0-9，下划线，圆点、横线</em></p>
<p><em>2. 在一些操作容器docker命令中，我们可以使用容器的名字代替容器的id，因为很明显容器的ID比容器的名字更好记，所以，容器的名字和容器的ID一样，不能重复；</em></p>
<ul>
<li>进入容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bash</span><br></pre></td></tr></table></figure>

<ul>
<li>退出容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit   		# 停止容器并退出（后台方式运行则仅退出）</span><br><span class="line">Ctrl+P+Q    # 不停止容器退出</span><br></pre></td></tr></table></figure>

<h3 id="转移"><a href="#转移" class="headerlink" title="转移"></a>转移</h3><ul>
<li>保存镜像</li>
</ul>
<p><em>将我们的镜像 保存为 tar压缩文件，这样方便镜像转移和保存，然后 可以在任何一台安装了docker的服务器上加载这个镜像</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save 镜像名/镜像ID -o 镜像保存在哪个位置与名字</span><br></pre></td></tr></table></figure>

<ul>
<li>加载镜像</li>
</ul>
<p><em>任何装有docker 的地方加载镜像保存文件，使其恢复为一个镜像</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i   		#镜像保存文件位置</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul>
<li>删除容器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f 容器名/容器ID   			#删除一个容器</span><br><span class="line">docker rm -f 容器名/容器ID 容器名/容器ID   #删除多个容器 空格隔开要删除的容器名或容器ID</span><br><span class="line">docker rm -f $(docker ps -aq)   		#删除全部容器</span><br></pre></td></tr></table></figure>

<ul>
<li>删除所有镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>

<ul>
<li>删除镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi -f 镜像名/镜像ID</span><br></pre></td></tr></table></figure>

<p>注：要完全删除一个项目，需要先删除其容器，再删除其镜像；</p>
<p>可通过 <code>docker ps -a</code> 来查看容器对应的ID，再用 <code>docker images</code> 查看镜像对应的ID</p>
<hr>
<p><strong>待续…</strong></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux(Ubuntu)部署Memos</title>
    <url>/archives/5fc31910.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近又白嫖了一个月服务器，反正空着也是空着，就想着用来练练手；刚好看见一个实用的备忘项目，就来搞搞，顺便（<del>水</del>）写一篇博客。此博客纯属小白向，零基础也能可以试试。</p>
<span id="more"></span>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>一台服务器</li>
<li>一个域名（如果只是练练手，没想让别人访问的话不用也行）</li>
<li>Xshell或者其他同类型软件</li>
</ul>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>选择服务器操作系统：建议选Linux，我这里用的是Ubuntu_20.04。</p>
<p>设置你的实例密码，待会儿用得上</p>
<h2 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h2><p>这里我用的是 <a href="https://www.xshell.com/zh/free-for-home-school/">Xshell</a> ，你也可以用其他同类型软件；连接服务器：</p>
<p>主机：填你服务器的公网IP；    端口号：22        ；如下：</p>
<img src="https://s2.loli.net/2023/02/28/X5aCnYug4RdKAMw.jpg" alt="xshell1" style="zoom: 67%;" />

<p>然后选择左侧栏中的“用户身份验证”，填写  用户名：root；密码：就是你刚才设置的；    如下：</p>
<img src="https://s2.loli.net/2023/02/28/cpiFaOkmuUfKS9P.jpg" style="zoom:67%;" />

<p>点击下边的“连接”即可连接到你的服务器；出现以下字样（即root@主机名）即算连接成功，如下图：</p>
<img src="https://s2.loli.net/2023/02/28/wEexMlhjY7VOidR.jpg" style="zoom:67%;" />



<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><ul>
<li>先更源，保证是最新</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<ul>
<li>先卸载旧版本Docker</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<ul>
<li>安装Docker依赖（Docker在Ubuntu上依赖一些软件包）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>

<ul>
<li>添加Docker官方密匙</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<ul>
<li>添加Docker软件源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果上面一步报错如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo: add-apt-repository: command not found</span><br></pre></td></tr></table></figure>

<p>可执行下面两条指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先</span></span><br><span class="line">sudo apt-get install python-software-properties</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再</span></span><br><span class="line">sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure>

<p>然后再次执行<strong>添加Docker软件源</strong>指令即可</p>
<ul>
<li>安装Docker</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<ul>
<li>验证是否安装成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p>出现以下即成功：</p>
<img src="https://s2.loli.net/2023/09/30/9gZMGPLCAWj87UE.jpg" style="zoom:50%;" />

<ul>
<li>启动docker</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<ul>
<li>加入开机自启</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<center>—— 至此，docker安装完毕 ——</center>


<h2 id="部署Memos"><a href="#部署Memos" class="headerlink" title="部署Memos"></a>部署Memos</h2><ul>
<li>拉取镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull neosmemo/memos:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name memos -p 5230:5230 -v ~/.memos/:/var/opt/memos neosmemo/memos:latest</span><br></pre></td></tr></table></figure>

<p>然后我们检查项目是否运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>如下图：说明已经运行。</p>
<img src="https://s2.loli.net/2023/02/28/5BjGSn2fDrdiTo6.jpg" style="zoom:67%;" />

<p>不过，现在我们还不能访问，因为我们的5230端口还没有开放。</p>
<p>回到  控制台 -&gt; 云服务器ECS -&gt; 网络与安全 -&gt; 安全组 -&gt; 管理规则 -&gt; 入方向 -&gt; 手动添加</p>
<p>添加一个如下规则，然后保存即可：</p>
<img src="https://s2.loli.net/2023/02/28/XMINo6dHUTGb3OB.jpg" style="zoom:67%;" />

<p>这样我们就可以在浏览器里通过你的  <code>公网IP:5230</code>  访问Memos了。</p>
<h2 id="登录Memos"><a href="#登录Memos" class="headerlink" title="登录Memos"></a>登录Memos</h2><p>第一次登录Memos，是英文界面，你可以在底部设置语言，然后注册个管理员账号，注册完成就可以登录了；登陆后，界面还是英文，你可以在左侧栏找到 Setting -&gt; Preference -&gt; Language -&gt; 简体中文 来设置中文。</p>
<p>个人觉得，Memos确实好用，自己去发现吧！</p>
<p>至此，教程全部结束；</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>安装好docker后，以后就可以直接拉取镜像了；也就两行命令的事，非常简单。</p>
<p>Docker里可以部署多个应用，只要端口号不冲突就行；然后通过 <code>公网IP:端口号</code> 进行访问就行。</p>
<p>这里推荐几个自己用着不错的docker项目：</p>
<ul>
<li><a href="https://alist.nn.ci/guide/install/docker.html">Alist</a></li>
<li><a href="https://github.com/usememos/memos">Memos</a></li>
<li><a href="https://docs.cloudreve.org/getting-started/install">Cloudreve</a></li>
<li><a href="https://github.com/whyour/qinglong">青龙面版</a></li>
<li><a href="https://github.com/vastsa/FileCodeBox">文件快递柜</a></li>
</ul>
<hr>
<h2 id="2023-03-14更新"><a href="#2023-03-14更新" class="headerlink" title="2023.03.14更新"></a>2023.03.14更新</h2><p>对于memos版本的升级：</p>
<p>先用 <code>docker ps</code> 查看memos的ID，然后用 <code>docker stop 容器ID</code> 来停止容器运行，最后重复上面的安装步骤即可更新：</p>
<ul>
<li>拉取镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull neosmemo/memos:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name memos -p 5230:5230 -v ~/.memos/:/var/opt/memos neosmemo/memos:latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：升级前要先备份数据，数据存放路径为 <code>/root/.memos/memos_prod.db</code> ，将这个db文件复制一份到别的目录，或者下载下来都行；这里推荐使用 FTP 工具，直接和在电脑上操作文件一样，就不用敲命令了。</strong></p>
</blockquote>
<p>另：你可以通过查看其日志来查看版本号，看是否升级成功！</p>
<center>——  END ——</center>
]]></content>
      <categories>
        <category>Docker</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Ubuntu</tag>
        <tag>Memos</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的命令提示符</title>
    <url>/archives/1ff8041c.html</url>
    <content><![CDATA[<h3 id="1-查看并导出目录文件夹名称"><a href="#1-查看并导出目录文件夹名称" class="headerlink" title="1. 查看并导出目录文件夹名称"></a>1. 查看并导出目录文件夹名称</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tree</span>&gt;list.txt		//查看文件夹并导出为list.txt文件</span><br><span class="line"><span class="built_in">tree</span> /f &gt;list.txt		//查看文件夹及里面的文件并导出为list.txt文件</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong><span id="more"></span></p>
<ul>
<li>只查看不导出，只用 <code>tree</code> 就行</li>
<li><code>list.txt</code> 可以自己更改（<code>list</code> 为文件名，<code>txt</code> 为后缀；文件名可以自定义，后缀可以为：<code>txt、md、xls</code> 等）</li>
<li>加上 <code>/f</code> 为显示文件夹下的文件，不加的话就只显示文件夹</li>
</ul>
<h3 id="2-批量更改文件名及后缀"><a href="#2-批量更改文件名及后缀" class="headerlink" title="2. 批量更改文件名及后缀"></a>2. 批量更改文件名及后缀</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ren</span> *.txt *.<span class="built_in">md</span>		//改后缀名</span><br><span class="line"><span class="built_in">ren</span> 旧文件名.txt 新文件名.txt		//改文件名</span><br></pre></td></tr></table></figure>

<p><strong>解释：</strong></p>
<ul>
<li><code>ren</code> 为更改后缀的命令</li>
<li><code>*.txt</code> 为更改前的后缀</li>
<li><code>*.md </code> 为你要更改的后缀</li>
</ul>
<p>如果你要更改所有文件，不只是<code>txt</code> 文件；那么可以用 <code>ren *. *.md</code> 命令！</p>
<p>ps: 上面的 <code>*</code> 为通配符，通配符还有一个 <code>? </code>; 具体作用为：<code>? </code>代表匹配一个字符， <code>*</code> 代表匹配多个字符；</p>
<p>其应用也很广，可以用来搜索你不记得具体名称的文件夹：</p>
<blockquote>
<ol>
<li><p>比如你记得你磁盘有一个文件，它的文件名的第一个字符不记得了，只记得第二个是a，第三个不记得了，第四个是1，后面的又不记得了，而且是一个 <code>css</code> 文件，怎么搜索呢？</p>
<p>答：<code>?a?1*.css </code> 这样就能找到了。</p>
</li>
<li><p>还有一个文件，文件名的前三个字符不记得了，后面是hello，是一个 <code>css</code> 文件，怎么找呢？</p>
<p>答：<code>???hello.css</code></p>
</li>
<li><p>如果一个文件是以 <code>module</code> 结尾的该怎么搜索？</p>
<p>答：<code>dir *module </code></p>
</li>
<li><p>如果一个文件是以 <code>module</code> 开头的怎么搜索？</p>
<p>答：<code>dir module*</code></p>
</li>
</ol>
</blockquote>
<h3 id="3-查看WiFi密码"><a href="#3-查看WiFi密码" class="headerlink" title="3. 查看WiFi密码"></a>3. 查看WiFi密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&#x27;netsh wlan show profiles&#x27;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear</span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong>这个代码可以查看你的笔记本电脑已经连接过的<code>wifi</code>密码，主要用于连接上但密码忘记的情况！</p>
<h3 id="4-修复电脑桌面白图标"><a href="#4-修复电脑桌面白图标" class="headerlink" title="4. 修复电脑桌面白图标"></a>4. 修复电脑桌面白图标</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@duecho off</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line">CD /d %userprofile%\AppData\Local</span><br><span class="line">DEL IconCache.db /a</span><br><span class="line">start explorer.exe</span><br><span class="line">cho 执行完成</span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong>复制上面的代码，在桌面新建一个文本文档，将其粘贴进去，再将后缀改为<code>.bat</code> ，双击运行，然后刷新一下桌面即可。</p>
<h3 id="5-图片隐写"><a href="#5-图片隐写" class="headerlink" title="5. 图片隐写"></a>5. 图片隐写</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy /b test.jpg + document.rar yincang.jpg</span><br></pre></td></tr></table></figure>

<p><strong>使用：</strong>将要隐藏的文件和图片放在同一个文件夹中；打开命令提示符窗口并输入以上代码（其中<code>test.jpg</code>为图片名称，<code>doucument.rar</code>为压缩包名称，<code>yincang.jpg</code>为输出的含有文件的图片名称）</p>
<p><strong>说明：</strong>如果要找回文件，将输出的图片后缀改为<code>.rar</code>再解压即可！</p>
]]></content>
      <categories>
        <category>CMD</category>
      </categories>
      <tags>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>Github+PicGo图床搭建</title>
    <url>/archives/febc4fee.html</url>
    <content><![CDATA[<h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><p>首先需要准备：</p>
<ul>
<li>一个GitHub账号</li>
<li>（没有的话先注册一个）</li>
<li>下载PicGo软件并安装</li>
<li>（软件GitHub地址：<a href="https://github.com/Molunerfinn/PicGo/releases%EF%BC%89">https://github.com/Molunerfinn/PicGo/releases）</a><span id="more"></span></li>
</ul>
<h3 id="创建仓库："><a href="#创建仓库：" class="headerlink" title="创建仓库："></a>创建仓库：</h3><p>打开GitHub，点击右上角的 “＋” 号，选择第一个 “New repository” 创建一个存放图片的仓库；</p>
<img src="https://s2.loli.net/2022/07/10/VE75bD61GXOge2n.jpg" style="zoom: 80%;" />

<p>仓库名称可以起个 “Image” ，描述的话随便就行，然后一定要选 “Public” 不要选 “Private” 下边随便勾一下 “Add a README file” 就行！最后点击 “Create repository” 来创建，具体如下图：</p>
<img src="https://s2.loli.net/2022/07/10/hWmGrZ3es5Ry6d1.jpg" style="zoom: 50%;" />

<h3 id="获取Token："><a href="#获取Token：" class="headerlink" title="获取Token："></a>获取Token：</h3><p>回到GitHub主页，点击右上角头像，在下拉菜单中找到 “Setting”；然后翻到最下边，点击 “Developer setting”，</p>
<img src="https://s2.loli.net/2022/07/10/fhEZRywAuSnGc1M.jpg" style="zoom: 50%;" />

<p>再点击最下边的 “Personal access tokens” ，然后新建一个 token 就行，如下：</p>
<img src="https://s2.loli.net/2022/07/10/coxK8Pjd5OF4rqX.jpg" style="zoom: 50%;" />

<img src="https://s2.loli.net/2022/07/10/QmsSeE2Y7fAaVPb.jpg" style="zoom:50%;" />

<p>“Note” 可以随便填一个，时间的话自己选个天数就行（这个天数是 token 过期的时间），我这里就选个90天吧！最重要的是上面图中我圈起来的一定要打上勾！一定要！然后划到最下边点击创建就行了！然后你就会看到你的 Token ，值得注意的是：<strong>这个token只会出现一次，一定要记在什么地方备用</strong>，要是真么忘记的话，可以再新建一个！</p>
<h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p>打开picgo软件，找到“图床设置”，点击“Github图床”，按如下配置：</p>
<img src="https://s2.loli.net/2022/07/10/xEsorp9iFnIAYPq.jpg" style="zoom:50%;" />

<p>解释一下：</p>
<ul>
<li>设定仓库名：这里填的是 你GitHub的用户名 + 你刚才建的仓库名</li>
<li>设定分支名：<strong>一定要填 “main”</strong> 不要填 “master” 否则配置不生效！！</li>
<li>设定Token：这里填你刚才创建的 token 即可</li>
<li>指定存储路径：按图上填就行</li>
<li>设定自定义域名：前面的都是一样的，后面两项为你的用户名和仓库名；具体为：<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></li>
</ul>
<p>点击确定，就可以了，现在你可以上传一张图片测试一下！</p>
<p>如果不成功的话，就去问百度吧！</p>
<hr>
<p>哦，对了，最后附上 PicGo的官方文档吧：</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0">官方指南</a></p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">用户配置</a></p>
<p>注意：设定分支名：<strong>一定要填 “main”</strong> 不要填 “master” 否则配置不生效！！这一点不要按照官方文档的来！</p>
<p>好了，这下真完事了！</p>
]]></content>
      <categories>
        <category>Github</category>
        <category>PicGo</category>
        <category>图床</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>PicGo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/archives/bd50b816.html</url>
    <content><![CDATA[<p>内网穿透，即 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。<span id="more"></span></p>
<p>最开始了解内网穿透是为了将自己写的HTML项目能够让别人看见，但当时又不了解服务器等东西，就上网搜方法；偶然看到说内网穿透可以，所以就找了好多教程；最终就选了以下这种方法！</p>
<hr>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装好jdk并配置环境变量、下载Tomcat并配置环境变量、注册一个Ngrok账号、一台电脑</p>
<h3 id="配置jdk与Tomcat"><a href="#配置jdk与Tomcat" class="headerlink" title="配置jdk与Tomcat"></a>配置jdk与Tomcat</h3><p>这个就不详写了，上网一搜一大堆！（注意Tomcat要与jdk的版本号对应，具体看官网对应关系：<a href="http://tomcat.apache.org/whichversion.html">Apache Tomcat® - Which Version Do I Want?</a>）</p>
<h3 id="注册并登录Ngrok以及开通隧道"><a href="#注册并登录Ngrok以及开通隧道" class="headerlink" title="注册并登录Ngrok以及开通隧道"></a>注册并登录Ngrok以及开通隧道</h3><p>Ngrok官网：<a href="https://www.ngrok.cc/">Sunny-Ngrok内网穿透服务</a></p>
<p>因为Ngrok是有免费线路的，所以完全可以白嫖。😁 一般不会失效，如果失效，再次开通就行。</p>
<p>登录进入后选择“隧道管理” —&gt; “开通隧道” —&gt; 向下滑，找到最后一个价格为0元的，购买就行；</p>
<p><strong>协议</strong>选<code>http/https</code>均可，<strong>隧道名称</strong>随便起，<strong>前置域名</strong>随便起（尽量短，好记；用英文、数字都行），<strong>本地端口</strong>默认就行，下面两个不用填，点击<strong>确定添加</strong>就可以了。</p>
<p>开通成功后可以在<strong>隧道管理</strong>查看自己的隧道了。然后下载客户端，<a href="https://www.ngrok.cc/download.html">Sunny-Ngrok内网转发客户端</a>，选择自己电脑的版本即可！</p>
<h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>下载后解压双击运行<code>Sunny-Ngrok启动工具.bat</code>，它会提示你要id,这时回到网页<strong>隧道管理</strong>找到你的<strong>隧道id</strong>粘贴进去，然后回车就行。</p>
<p>这时如果你通过你的网址进行访问会提示你隧道不可用；这是因为你没有运行Tomcat，你cmd运行Tomcat后，再刷新就能看到Tomcat的页面了，如图：</p>
<p><img src="https://s2.loli.net/2022/07/10/TOGBXVCNj68AmiZ.jpg"></p>
<p>出现这个页面就恭喜你了，你已经成功了！</p>
<hr>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这时你的内网穿透已经成功了，但是如果你有自己的HTML项目，该怎样让别人通过你的网址访问呢？</p>
<p>其实也很简单，将项目放到Tomcat目录下的<code>webapps</code>目录就行；访问的话就是<code>你的网址+项目的目录名+项目的名.html</code>，如我的一个就是<code>http://to.free.idcfengye.com/migong/index.html</code></p>
<p>这样就能让别人通过你的网址来访问你的项目了！</p>
<hr>
<h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><p>注意，内网穿透的过程中你运行的 <code>Tomcat</code> 与 <code>Sunny-Ngrok启动工具</code> 不能关闭，否则连接会断开！</p>
<p>完！</p>
<hr>
<p>更新：现在Ngrok免费的不太稳定，推荐使用 <a href="https://open.dingtalk.com/document/resourcedownload/http-intranet-penetration">钉钉内网穿透</a></p>
<p>更新： <a href="https://open.dingtalk.com/document/resourcedownload/http-intranet-penetration">钉钉内网穿透</a> 也废弃了！  — 2022.07.21</p>
]]></content>
      <categories>
        <category>内网穿透</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>Ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法基础</title>
    <url>/archives/b797e99c.html</url>
    <content><![CDATA[<p>由于该博客的文章全部都是用markdown写的，所以就写一下MarkDown语法相关吧！<span id="more"></span></p>
<hr>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
<p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
<p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p>
<hr>
<p>Markdown 能被使用来撰写电子书，如：Gitbook。</p>
<p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</p>
<hr>
<p>教程网站：<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程 | 菜鸟教程</a></p>
<p>个人觉得好用的在线编辑网站：<a href="https://dillinger.io/">Online Markdown Editor - Dillinger, the Last Markdown Editor ever.</a></p>
<p>LaTex公式手册网站：<a href="https://www.zybuluo.com/codeep/note/163962#mjx-eqn-eqsample">LaTex 公式指导手册</a> </p>
<p>个人觉得好用的PC端MarkDown软件：<a href="https://www.typora.io/">Typora — a markdown editor, markdown reader.</a>  – （现在收费了，不过是买断制，如果喜欢可以购买正版！）</p>
<hr>
<p>结束！！</p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg的简单使用</title>
    <url>/archives/d9d00a92.html</url>
    <content><![CDATA[<p>简单聊一聊FFmpeg的使用；</p>
<p>其有非常强大的功能：包括但不限于 视频采集功能、视频格式转换、视频抓图、给视频加水印等。</p>
<p><em>以下来源于百度百科：FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。</em></p>
<span id="more"></span>

<hr>
<h3 id="简单介绍一下使用方法："><a href="#简单介绍一下使用方法：" class="headerlink" title="简单介绍一下使用方法："></a>简单介绍一下使用方法：</h3><h3 id="应用场景1：格式转换"><a href="#应用场景1：格式转换" class="headerlink" title="应用场景1：格式转换"></a>应用场景1：格式转换</h3><p>我想把用iPhone拍的.MOV文件转成.avi文件。最简单了，可以执行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV D:\Media\output.avi  </span><br></pre></td></tr></table></figure>

<p>【意思是，把D:\Media目录下的源文件IMG_0873.MOV（视频：h.264，音频：aac）转换成output.avi（编码格式自动选择为：视频mpeg4，音频mp3），目标文件仍然保存到D:\Media目录下。】</p>
<p>问题来了：我想自己指定编码格式，怎么办呢？可通过目标文件的扩展名（.flv、.mpg、.mp4、.wmv等）来控制，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV D:\Media\output2.flv</span><br></pre></td></tr></table></figure>

<h3 id="应用场景2：调整大小"><a href="#应用场景2：调整大小" class="headerlink" title="应用场景2：调整大小"></a>应用场景2：调整大小</h3><p>若源文件的图像帧尺寸是1920x 1080，我不需要这么大——能有720 x 480就够了。于是，就要用上-s参数了。为了保证图像缩放后的质量，最好加上码流参数-b:v。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -s 720x480 -b:v 1500k D:\Media\output2.avi</span><br></pre></td></tr></table></figure>

<h3 id="应用场景3：翻转视频"><a href="#应用场景3：翻转视频" class="headerlink" title="应用场景3：翻转视频"></a>应用场景3：翻转视频</h3><p>手机拍的视频中，有些是颠倒的，我想让它顺时针旋转90度。这时候，可以使用-vf参数加入一个过滤器，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -vf &quot;rotate=90*PI/180&quot; D:\Media\output3.avi</span><br></pre></td></tr></table></figure>

<p>注：如果想逆时针旋转90度，90前面加个负号就可以了。</p>
<h3 id="应用场景4：截取一段"><a href="#应用场景4：截取一段" class="headerlink" title="应用场景4：截取一段"></a>应用场景4：截取一段</h3><p>需要从源视频里截取一小段，怎么办呢？比如从第2秒的地方开始，往后截取10秒钟。命令行可以这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 2 -t 10 -i D:\Media\IMG_0873.MOV D:\Media\output4.avi</span><br><span class="line">或</span><br><span class="line">ffmpeg -i ./input.mp4 -c:v libx264 -crf 18 -ss 00:00:10 -to 00:00:15 ./cut_out.mp4</span><br></pre></td></tr></table></figure>

<p>注：这种情况下，-ss和-t参数必须放在-i前面，表示是限定后面跟着的输入文件的。</p>
<h3 id="应用场景5：视频合成"><a href="#应用场景5：视频合成" class="headerlink" title="应用场景5：视频合成"></a>应用场景5：视频合成</h3><p>用手机拍的视频有时候背景噪音比较大。怎么把噪音去掉，换成一段美妙的音乐呢？使用FFmpeg也能轻易做到。</p>
<p><em><strong>第一步：</strong></em>把源文件里的音频去掉，生成一个临时文件tmp.mov</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -vcodec copy -an D:\Media\tmp.mov</span><br></pre></td></tr></table></figure>

<p>注：-vcodec copy的意思是对源视频不解码，直接拷贝到目标文件；-an的意思是将源文件里的音频丢弃。</p>
<p><em><strong>第二步：</strong></em>把这个无声的视频文件（tmp.mov）与一个音乐文件（music.mp3）合成，最终生成output.mov</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\tmp.mov -ss 30 -t 52 -i D:\Media\music.mp3 -vcodec copy D:\Media\output5.avi</span><br><span class="line"></span><br><span class="line">ffmpeg.exe -i G:\test\removebgm.mp4 -ss 00:00:00.0 -t 00:03:31 -i G:\test\456.mp3 -acodec copy G:\test\hfdk.mp4</span><br></pre></td></tr></table></figure>

<p>为了保证良好的合成效果，音乐时长必须匹配视频时长。这里我们事先知道视频时长为52秒，于是截取music.mp3文件的第30秒往后的52秒与视频合成。另外，为了保证音频时长截取的准确性，我们这里没有使用-acodec copy，而是让音频重新转码。</p>
<p>还有一种情况：我们希望在一段视频上叠加一张图片（将视频画面全部显示该图片）。可以简单实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -i D:\Media\logo.png -filter_complex   &#x27;overlay&#x27; D:\Media\output6.avi</span><br></pre></td></tr></table></figure>

<h3 id="应用场景6：视频播放"><a href="#应用场景6：视频播放" class="headerlink" title="应用场景6：视频播放"></a>应用场景6：视频播放</h3><p>格式转换或合成之后，我们需要试着播放一下。播放器的选择很多。这里顺手用ffplay工具也行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffplay -i D:\Media\output6.avi</span><br></pre></td></tr></table></figure>

<h3 id="应用场景7：获取视频信息"><a href="#应用场景7：获取视频信息" class="headerlink" title="应用场景7：获取视频信息"></a>应用场景7：获取视频信息</h3><p>有时候，我只是想看看这个视频文件的格式信息。可以用ffprobe工具：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffprobe -i D:\Media\IMG_0873.MOV</span><br></pre></td></tr></table></figure>

<h3 id="应用场景8：截取视频前3秒-并转化为gif"><a href="#应用场景8：截取视频前3秒-并转化为gif" class="headerlink" title="应用场景8：截取视频前3秒 并转化为gif"></a>应用场景8：截取视频前3秒 并转化为gif</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00:01 -t 3 -i 123.mp4 -vf crop=iw:ih*2/3 -s 320x240 -r 7 456.gif</span><br></pre></td></tr></table></figure>

<p>ps: -ss 00：00：01表示从视频第一秒开始截取  ;  - t 表示截图3秒钟的视频  ;   -vf crop=iw:ih*2/3 表示截取视频的部分区域，其中宽为视频宽度，高为原视频的2/3  ;     -r 7 表示每秒帧率为7帧  ; </p>
<h3 id="应用场景9：把AVI里的音频保存成mp3文件"><a href="#应用场景9：把AVI里的音频保存成mp3文件" class="headerlink" title="应用场景9：把AVI里的音频保存成mp3文件"></a>应用场景9：把AVI里的音频保存成mp3文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i source_video.avi -vn -ar 44100 -acodec libmp3lame -ac 2 -ab 192K -f mp3 sound.mp3</span><br></pre></td></tr></table></figure>

<h3 id="应用场景10：分离视频音频流"><a href="#应用场景10：分离视频音频流" class="headerlink" title="应用场景10：分离视频音频流"></a>应用场景10：分离视频音频流</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe -i G:\test\123.mp4 -f mp3 -vn G:\test\fgsiug.mp3</span><br></pre></td></tr></table></figure>

<h3 id="应用场景11：截取音频"><a href="#应用场景11：截取音频" class="headerlink" title="应用场景11：截取音频"></a>应用场景11：截取音频</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i demo.mp3 -ss 00:26 -to 01:16:43 -c copy demo1.mp3</span><br><span class="line">//从26秒截取到一小时16分43秒，并导出</span><br></pre></td></tr></table></figure>

<h3 id="应用场景12：拼接视频"><a href="#应用场景12：拼接视频" class="headerlink" title="应用场景12：拼接视频"></a>应用场景12：拼接视频</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -f concat -i filelist.txt -c copy output.mp4</span><br><span class="line">//需要在目录下创建一个filelist.txt文件，内容如下：</span><br><span class="line">file &#x27;1.mp4&#x27;</span><br><span class="line">file &#x27;2.mp4&#x27;</span><br><span class="line">file &#x27;3.mp4&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="应用场景13：添加封面"><a href="#应用场景13：添加封面" class="headerlink" title="应用场景13：添加封面"></a>应用场景13：添加封面</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ffmpeg -i output.mp4 -i cover.jpg -<span class="built_in">map</span> <span class="number">1</span> -<span class="built_in">map</span> <span class="number">0</span> -c copy -disposition:<span class="number">0</span> attached_pic -y output_1.mp4</span><br></pre></td></tr></table></figure>



<p><em>ps：以上来源于互联网以及FFmpeg官方文档</em></p>
<hr>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>附上FFmpeg官网链接：<a href="https://github.com/FFmpeg/FFmpeg">FFmpeg/FFmpeg: Mirror of https://git.ffmpeg.org/ffmpeg.git (github.com)</a></p>
]]></content>
      <categories>
        <category>FFmpeg</category>
      </categories>
      <tags>
        <tag>FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>突然连接不了GitHub?</title>
    <url>/archives/d840bd6.html</url>
    <content><![CDATA[<p>前段时间开学了，比较忙就没空写博客了；不过就在我忙里偷闲抽空写的时候发现连接不了GitHub了，嗯？什么情况？<span id="more"></span></p>
<p>这是什么情况？不应该啊？我啥都没动咋就不行了？一连串的疑问在我脑中萦绕！</p>
<p>以下为报错的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\MyBlog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (D:\MyBlog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>

<p>没办法，第一次遇到，上网搜解决办法吧！大部分的帖子都说ssh失效了，重新生成一下；好，我照做！但完全没效果是什么意思，是我不配了吗？难搞哦！最后想了想先放这儿吧，有空再好好收拾收拾你！</p>
<p>过了几天，我又屁颠屁颠地回来了；继续搞，我还就不信了！继续上网搜解决办法呗，但结果都大差不差，都让我重新生成ssh；可我都重新生成几遍了，还是不行，这怎搞？老规矩，先晾着，说不定哪天我试试他自己就好了！（<del>我在想peach</del>）</p>
<p>不过，这次我可没放着就不管了；我甚至走路都在想到底是哪里出问题了；后来仔细分析了一下，好像和家里的改变就只有地区的改变了！再深想一下，网络也随之改变了！嗯，一定是这个原因，死马当做活马医，试试吧！<strong>断开校园网，拔掉网线</strong>，换个手机热点看看！（<em>一定要拔掉网线，不要问我为什么会知道</em>）</p>
<p>没想到啊，没想到！结果真的出在这里，用手机热点后一下就连通了！！（话说，这是为什么呢？校园网端口没开放？那换个端口行不？我还没试过，有谁试了可以给我说一下哈！）</p>
<p>到这儿，文章就结束了；结果只是换个网络就行，整的那么复杂。还好我没想不开将博客删了重建！也算是一点经验吧！希望遇到这个问题的朋友看到这儿后可以完美解决！</p>
<hr>
<p>突然又想到福尔摩斯的一句名言：</p>
<blockquote>
<h4 id="排除一切不可能的，剩下的即使再不可能，那也是真相！-—-夏洛克·福尔摩斯"><a href="#排除一切不可能的，剩下的即使再不可能，那也是真相！-—-夏洛克·福尔摩斯" class="headerlink" title="排除一切不可能的，剩下的即使再不可能，那也是真相！  — 夏洛克·福尔摩斯"></a>排除一切不可能的，剩下的即使再不可能，那也是真相！<br><br>  — 夏洛克·福尔摩斯</h4></blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>精确搜索你需要的资料</title>
    <url>/archives/c485373b.html</url>
    <content><![CDATA[<h3 id="今天写写关于搜索的文章吧！"><a href="#今天写写关于搜索的文章吧！" class="headerlink" title="今天写写关于搜索的文章吧！"></a>今天写写关于搜索的文章吧！</h3><p>“搜索”如果用好了，你几乎可以搜到任何你要的资料，但前提是你得会搜哦！</p>
<p>以下是我常用的搜索小技巧，你可以参考参考。</p>
<span id="more"></span>

<hr>
<h3 id="1-将结果限定在某个网站中"><a href="#1-将结果限定在某个网站中" class="headerlink" title="1. 将结果限定在某个网站中"></a>1. 将结果限定在某个网站中</h3><p>实现这个操作并不难，用<code>site</code>指令即可；</p>
<p>如：我要搜知乎中关于 “人工智能” 的内容，就可以这样来表达：<code>人工智能  site:zhihu.com</code>，这样就能搜到知乎中所有有关人工智能的文章，还弥补知乎站内搜索效果差的缺陷。</p>
<h3 id="2-将结果限定为某种文件类型"><a href="#2-将结果限定为某种文件类型" class="headerlink" title="2. 将结果限定为某种文件类型"></a>2. 将结果限定为某种文件类型</h3><p>这个也不难理解，不过你得有明确的目标，知道你要搜索的文件类型；这种适合用来搜电子教材或文档；</p>
<p>如：我要搜 “2020考研数学真题”，就可以这样表示：<code>2020考研数学真题 filetype:pdf</code>，这样你搜到的就都是各大网站的PDF文件。</p>
<h3 id="3-限定搜索结果的时间范围"><a href="#3-限定搜索结果的时间范围" class="headerlink" title="3. 限定搜索结果的时间范围"></a>3. 限定搜索结果的时间范围</h3><p>你如果要搜比较新的内容，不想要时间久远的内容来徒增工作量，那么就能用得上这个指令了；</p>
<p>如：我要搜 “人工智能” 最前沿的资讯，就能这样写：<code>人工智能 2020..2021</code>，这样搜出来的基本就是2020年到2021年关于人工智能的信息了。当然，时间你可以随便更换。</p>
<h3 id="4-限定标题中必须包含的关键字"><a href="#4-限定标题中必须包含的关键字" class="headerlink" title="4. 限定标题中必须包含的关键字"></a>4. 限定标题中必须包含的关键字</h3><p>这个也很容易理解了</p>
<p>如：我要搜关于 “ AI ” 的文章，但标题中必须包含 “大数据”，就能这样写：<code>AI intitle:大数据</code>，这样搜到的 AI 信息就都是标题中带有 “大数据” 三个字的。</p>
<h3 id="5-限定结果网址中包含字段"><a href="#5-限定结果网址中包含字段" class="headerlink" title="5. 限定结果网址中包含字段"></a>5. 限定结果网址中包含字段</h3><p>如：我要搜腾讯的关于 “人工智能” 的网站，那么就能写为：<code>人工智能 inurl:tencent</code>，这样就能直接看到所有腾讯旗下关于人工智能的内容，不用再在浏览器中一页一页向下找。</p>
<h3 id="6-删除结果中你不想要的信息"><a href="#6-删除结果中你不想要的信息" class="headerlink" title="6. 删除结果中你不想要的信息"></a>6. 删除结果中你不想要的信息</h3><p>此指令可以删除搜索结果中不必要的信息；不过，我一般用来去掉广告、推广之类的。</p>
<p>如：我要搜 “人工智能学习” ，就能写为：<code>人工智能学习 -广告 -推广</code>，这样搜出来的没有广告，没有搜索引擎的推广，都是精华；不信你可以试试。</p>
<p>当然，这个指令不止可以用来去广告，你也可以开动你那聪明的小脑瓜，想想怎样用可以更加方便、快捷、高效。</p>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">作用</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">site</td>
<td align="center">将结果限定在某个网站中</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">filetype</td>
<td align="center">将结果限定为某种文件类型</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">时间1..时间2</td>
<td align="center">限定搜索结果的时间范围</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">intitle</td>
<td align="center">限定标题中必须包含的关键字</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">inurl</td>
<td align="center">限定结果网址中包含字段</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">“ -“（减号）</td>
<td align="center">删除结果中你不想要的信息</td>
<td align="center">见文中</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>精确搜索</category>
      </categories>
      <tags>
        <tag>搜索技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌账号的注册</title>
    <url>/archives/c7047092.html</url>
    <content><![CDATA[<p>今天写一个关于国内注册谷歌账号的方法，防止自己忘记，也可给不会的朋友一点思路！</p>
<p>这些方法也是截止写这篇文章为止，我自己测试可用的！</p>
<span id="more"></span>

<p>注册的前提是，你有 “科学上网” 的方法；否则就算注册了也没用不是吗？另外，你还得安装谷歌框架，这个软件你可以点 <a href="https://yinzhen.lanzoui.com/iM4Bkutxnfa">这里</a> 下载。</p>
<p>这里我不提供该上网方法与软件，有兴趣自己搜！</p>
<p><strong>ps：文中环境为 “科学上网” 环境下！</strong></p>
<hr>
<h3 id="1-利用QQ邮箱"><a href="#1-利用QQ邮箱" class="headerlink" title="1. 利用QQ邮箱"></a>1. 利用QQ邮箱</h3><p>手机上下载QQ邮箱，在 “添加账户” 处选择 Gmail 邮箱，点击后会出现登录页面；你可以点击左下角的 “创建账号” 来进行注册，接着一步一步往下走就行。</p>
<h3 id="2-利用Gmail邮箱"><a href="#2-利用Gmail邮箱" class="headerlink" title="2. 利用Gmail邮箱"></a>2. 利用Gmail邮箱</h3><p>Gmail邮箱在各大软件商店都能下载，安装完成并打开后选择创建账户，一步一步往下即可，国内手机号是可以接到验证码的！</p>
<p>今天我刚用此方法注册了一个新的账号，可行！ </p>
<h3 id="3-利用OurPlay加速器"><a href="#3-利用OurPlay加速器" class="headerlink" title="3. 利用OurPlay加速器"></a>3. 利用OurPlay加速器</h3><p>该软件在各大应用商店也能下载，下载安装后，点击登录账户（此时没有创建账户这个选项，别急，往下看）；随便输入一个已经存在的账号【例如：aaaa666#gmail.com （将 # 改为 @ 即可）】，进入下一步输入密码；不是你的账号，你肯定不知道密码，所以点手机上的返回菜单（不要大返回桌面，返回上一步就行），这是你会发现在登录账户页面的左下角出现了 “创建账户” 的按钮；接着一步一步向下就行了。注册完成就能登录Gmail了，这时就可以将OurPlay加速器卸载了！（没错，卸磨杀驴😉）</p>
<h3 id="4-利用-Google-Chrome-浏览器"><a href="#4-利用-Google-Chrome-浏览器" class="headerlink" title="4. 利用 Google Chrome 浏览器"></a>4. 利用 Google Chrome 浏览器</h3><p>这个方法是我听别人说的，今天我测试了一下，没成功；但想到可能是我自己的原因，所以就写出来给大家看看，万一你们可以呢，对吧！</p>
<p>将PC端 Google Chrome 浏览器语言设置为英文，重启浏览器；然后打开页面进行注册，按部就班地往下即可。</p>
<hr>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>注册完成后，不要频繁更换代理IP，有可能会被封，就这样。</p>
]]></content>
      <categories>
        <category>谷歌</category>
      </categories>
      <tags>
        <tag>谷歌</tag>
      </tags>
  </entry>
  <entry>
    <title>解析Freenom域名</title>
    <url>/archives/79444b31.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        前几天刚用 github + hexo 搭建了一个博客，用来记录自己的学习成果！但域名是 github 的二级域名，看着不太好看；就寻思怎样白嫖一个域名；<span id="more"></span>搜来搜去，看到了一个帖子说可以去 freenom 白嫖，就想着试试；结果自己根本搞不了，无奈继续搜教程呗！看了好多教程，都没成功；想来想去就上 Youtube 了，按时间排序，第一个就是；真是保姆级的教程，一次成功，哈哈！视频链接我放这儿了，有需自取：<a href="https://www.youtube.com/watch?v=dTVKfuW9BiU">白嫖freenom域名</a></p>
<p>​        白嫖成功了，自然要用起来，不然费那么大劲干什么！其实我之前是有买过域名和服务器的，但感觉有一丢丢贵，就没续费了；但那是在阿里云买的，域名解析和现在的情况完全不同；没办法，就又双叒上网搜教程，还是找了好多，搜索的姿势也换了好多，终于还是让我找到了，难呐！（该说不说，搞这个也许代码功夫没长进，搜索资源的心得倒是攒了一大堆！）于是又是一波操作，现在弄成功了，域名是 totoro933.tk ，不出意外应该之后的很长一段时间都有效，若是打不开了，或者打开后不是我的博客，就说明被回收了（免费的还是有弊端的，有条件还是自己买个吧）。好了，接下来我会将我踩的坑分享一下，有需要的可要好好看了！</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>​        有一个域名，也可以和我一样去 freenom.com 白嫖（教程在上边）</p>
<p>​        注册好并实名认证 Dnspod ，官网地址：<a href="https://console.dnspod.cn/">Dnspod官网</a></p>
<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>​        其实在 freenom 买过域名后，它本就提供了 DNS 解析服务，但因为 freenom 的 DNS 解析在国内可能不是很流畅，所以我才会选用 Dnspod （这是腾讯家的网站）；在解析之前，我们要把这个域名的控制权从 freenom 交到 Dnspod 的手上：打开 Dnspod 主页，在侧栏中选择“我的域名”，点击添加域名，把你的域名填进去，如 我的就是：totoro933.tk ，点击确定；接着往下，他会给你两个 dns server 地址，将其填到 freenom 中，具体流程为：</p>
<blockquote>
<p>登陆freenom，从首页点击 services -&gt; my domain -&gt; manage domain -&gt; Management Tools -&gt; Nameservers -&gt; Use custom nameservers (enter below) -&gt; 在前两个空中填入 Dnspod 给你的两个的 dns server 地址，最后点击最下边的提交按钮就好了。</p>
<p>如果你找不到 My domain ， 请确认你是不是登录了。</p>
</blockquote>
<p>​        完成上述步骤后，打开你的 Dnspod 主页，找到你刚才添加的域名，点击它，你会跳到添加解析度页面，点击添加记录，<em>主机记录</em> 一栏填<code>www</code>，<em>记录类型</em> 填<code>A</code>，<em>线路类型</em> 为默认，<em>记录值</em> 填 ping xxxx.github.io后所得到的IP地址，其中xxxx为你的 github 仓库名，后边的默认就行，点击确定；然后再点击快速添加解析，选择“域名映射(CNAME)”，填入xxxx.github.io，确定即可！到这里，DNS解析已经完成了。<strong>（注意：有时候 DNS 的设置不是即时生效的，不同地方需要不同的时间，有时候几分钟就好了，有时候要一晚上一天，设置好后可以美美的睡一觉，第二天应该就没问题了！）</strong></p>
<h3 id="设置github"><a href="#设置github" class="headerlink" title="设置github"></a>设置github</h3><p>​        进入 github 你托管博客的那个项目，按顺序依次点<code>setting -&gt; GitHub Pages -&gt; Custom domain</code>， 输入你的域名，如 我的为：totoro933.tk，点 save 。</p>
<h3 id="增加-CNAME-文件"><a href="#增加-CNAME-文件" class="headerlink" title="增加 CNAME 文件"></a>增加 CNAME 文件</h3><p>​        在你存放博客的根目录的 <code>source</code> 文件夹下新建一个文件  <code>CNAME </code>，注意，它没有后缀，就叫 CNAME ，文件内容填你的域名！</p>
<h3 id="修改-config-文件"><a href="#修改-config-文件" class="headerlink" title="修改 _config 文件"></a>修改 _config 文件</h3><p>​        去你 blog 的根目录下，修改 _config.yml 文件：打开后搜 skip ，你会看到 <code>skip_render:</code>，然后在后边添加<code>CNAME</code>，注意，在CNAME前有个空格！！！</p>
<p>​        然后保存，之后就能通过你的域名来访问你的博客了；如果没生效的话，可以先进行一波</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p>​        然后就能愉快的访问了！</p>
]]></content>
      <categories>
        <category>Freenom</category>
        <category>域名</category>
      </categories>
      <tags>
        <tag>Freenom</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/archives/f3fb008f.html</url>
    <content><![CDATA[<blockquote>
<h4 id="写在前边"><a href="#写在前边" class="headerlink" title="写在前边"></a>写在前边</h4><p>我的第一篇博客，关于博客搭建的（hexo + github），记录搭建过程以及我踩过的坑！</p>
<p>有兴趣可以点开看看哦！</p>
</blockquote>
<span id="more"></span>

<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>安装 git</li>
<li>安装 node.js</li>
<li>安装 hexo</li>
<li>注册一个 github 账号</li>
<li>搭建仓库</li>
<li>生成SSH Keys</li>
<li>生成博客内容</li>
<li>发布博客至互联网</li>
</ol>
<hr>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>​    首先，我们先来了解一下什么是 git；简单来说 git 是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用 git 同步到 GitHub 上。这里，我们就不多说了！</p>
<p>​    附上 git 官网地址：<a href="https://git-scm.com/">git官网</a></p>
<p>​    去官网下载适合自己电脑的版本，下一步，下一步跟着安装即可！我这里提供个教程，仅供参考！<a href="https://blog.csdn.net/ssd21988/article/details/107826076">git安装教程</a>  步骤可能有些不一样，不过一般都按默认即可。</p>
<p>安装完成后，我们可以测试一下安装成功与否：按键盘上 win + R 键，输入 cmd ，打开命令提示符窗口，接着输入 <code>git --version</code> ，看其是否出现版本号；如下图：</p>
<p><img src="https://s2.loli.net/2024/07/12/sn7HMNDolVeBwKk.jpg"></p>
<p>​    如果出现，那么恭喜你，安装成功！（如果命令提示符上没有可以重启电脑后再次查看或在git上查看）</p>
<p>​    这时候你会发现，鼠标右击后会出现两个新的菜单 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>，我们平时只会用到后者，不要搞错了！</p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>​    因为，我们的博客是基于 hexo 的，而 hexo 又是基于 node.js 的，所以这是必不可少的！</p>
<p>​    我们可以去其<a href="http://nodejs.cn/download/">官网</a>，下载并安装；也是直接下一步、下一步就行；这里我也放个教程，可以参考一下：<a href="https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a>；不过，值得注意的是：安装 node.js 会包含环境变量及 npm 的安装</p>
<p>​    安装好以后，我们要检测 node 与 npm 是否安装成功：按键盘上 win + R 键，输入 cmd ，打开命令提示符窗口，分别输入 <code>node -v</code> ，<code>npm -v</code> 看其是否出现版本号；</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>​    hexo 就是我们的个人博客网站的框架；安装的话也很简单，按键盘上 win + R 键，输入 cmd ，打开命令提示符窗口，输入<code>npm install -g hexo-cli </code>，进行安装hexo，等待安装好后，我们检验其是否安装成功输入<code>hexo -v</code>看是否出现版本号；如下图：</p>
<p><img src="https://s2.loli.net/2024/07/12/uZSAWjHx3JCBndT.jpg"></p>
<p>如果安装不成功（前提是按照<a href="https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a>的步骤来进行）那么可以按照<a href="https://blog.csdn.net/fuyuanduan/article/details/128750582">此方法</a>来进行设置，给完权限后再次执行安装hexo的命令即可安装成功了！</p>
<h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><p>​    我们打开<a href="https://github.com/">github官网</a>，然后点右上角的Sign up，即可注册，其实也很简单；这里还是提供一篇教程，不会的可以看看：<a href="https://www.bilibili.com/read/cv5107169">github注册教程</a>，<strong>注意：一定要记住注册名、注册邮箱和注册密码哦！!</strong></p>
<blockquote>
<p>至此，我们的准备工作就做完了，接下来就是实操时间！</p>
</blockquote>
<hr>
<h3 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h3><p>​    注册完账号后登陆，点击右上角的 + 号，选择 New repository  ；然后，仓库名字填你的注册名 + <code>.github.io</code>，例如我的就是 <code>seatoro.github.io</code>，之后的 Description 可填可不填； 接下来选择 Public ，否则别人访问不了你的博客！然后把 Add a README file 勾上；最后，点击最下边的 Create repository 的按钮就能创建好你的仓库了！如下图：</p>
<p><img src="https://s2.loli.net/2024/07/12/BAeQ2Smnj1h94Tx.jpg"></p>
<h3 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h3><p>​    我们可以在合适的盘新建一个文件夹，可以命名为MyBlog，hexo 框架与以后你自己发布的网页都会在这个文件夹中。一定要记住路径哦，别之后找不到了！打开这个文件夹，鼠标右键，点击 <code>Git Bash Here</code>，然后我们就会进入一个黑框框页面；直接输入 <code>SSH</code> ，来检测我们是否装有SSH，其实默认是装过的！然后输入 <code>ssh-keygen -t rsa -C &quot;你注册github的邮件地址&quot;</code>。之后敲4次回车键（<strong>注意：不是连着敲，敲一次，等里面的内容不再变化后再敲下一次！</strong>）最后，你会看到一个用短线组成的框框，到这儿你就成功了！不要关闭这个窗口，一会还要用！！</p>
<p>​    按 Win + E 打开文件资源管理器，打开C盘 –&gt; 用户文件夹 –&gt; 个人文件夹 –&gt; .ssh文件夹，进入后我们可以看到里面有两个文件，用文本编辑器打开名为 <code>id_rsa.pub</code>的文件，<code>ctrl + a</code> <code>ctrl + c</code>复制里面的全部内容！</p>
<p>​    打开 github ，点击右上角头像找到 Setting ，点进去，往下划在左侧栏找到 SSH and GPG keys，点进去，第一个就是SSH Keys，点击 New SSH Key ，Title 随便填如：MyBlog；Key 就填你刚才复制 id_rsa.pub 里的一大串内容，（以你的邮箱结尾）；点 Add SSH Key 按钮即可。</p>
<p>​    测试是否绑定成功：在刚刚到黑框中输入 <code>ssh -T git@github.com</code>，敲回车，再输入 yes 敲回车即可，只要出现<code>Hi 你的github用户名</code>，就说明成功了！</p>
<h3 id="生成本地博客内容"><a href="#生成本地博客内容" class="headerlink" title="生成本地博客内容"></a>生成本地博客内容</h3><p>​    进入你在上一步中创建的文件夹，在空白处右键，点击 <code>Git Bash Here</code>，在出现的黑框中输入 <code>hexo init</code>来初始化我们的hexo，等待执行完成（如果出现错误，可多尝试几次），成功的标志：<code>INFO Start blogging with Hexo!</code>，这时我们打开上一步中创建的文件夹就会发现里面多了很多内容！</p>
<p>​    继续在黑框中敲命令：<code>hexo s</code>，启动本地服务器，看到出现 <code>http://localhost:4000</code>后就大功告成，接着我们只需要复制这个地址，去浏览器打开，就能看到我们的博客了；关闭服务器的话只需按 <code>ctrl + c</code>（没错就是复制的快捷键）就能关闭了，关闭后浏览器就打不开你的博客了！</p>
<h3 id="发布博客至互联网"><a href="#发布博客至互联网" class="headerlink" title="发布博客至互联网"></a>发布博客至互联网</h3><p>​    进入你在上上一步中创建的文件夹，找到<code>config.yml</code>文件（注意：没有扩展名是因为你没有开启这个功能，开启方法<a href="https://jingyan.baidu.com/article/f00622282564bdfbd3f0c827.html">点这儿</a> ）并用文本编辑器打开，找到最后几行更改为下图所示。（<strong>注意：最后一行要空出来，即branch: main 后面要空一行；每个冒号后面有一个空格</strong>）另，repo后面的内容把我的用户名（seatoro）改为你自己的！！保存，退出即可。</p>
<p><img src="https://s2.loli.net/2024/07/12/qi1TzakEo74xWfe.jpg"></p>
<p>​    进入你的博客文件夹，在空白处右键，点击 <code>Git Bash Here</code>，在出现的黑框中输入 <code>npm install hexo-deployer-git --save</code>，安装 hexo-deployer-git ；安装成功后接着敲命令<code>hexo g</code>，回车；执行完后接着敲 <code>hexo d</code>，这个命令是发布网页至服务器中的！（如若出错，多试几次）这时需要验证你的github账号，用户名，就是github用户名，密码就不是你设置的密码了；我们打开github，点击右上角头像找到 Setting ，点进去，往下划在左侧栏找到 Developer settings，点进去，在左侧栏找到 Personal access tokens ，点进去，Note 随便填，Expiration 默认30天就行，下边的复选框全部勾上，最后点击 Generate token 按钮生成令牌。复制生成的令牌，它只会出现一次，一定要记好；将复制的内容粘贴到刚才的密码框中点击 OK 就行了！这时就将本地内容上传到 github 中了，然后你就能通过网址访问了，网址就是你 github 主页左上角的网址，如下：</p>
<p><img src="https://s2.loli.net/2024/07/12/miawLHGdNXhAC3c.jpg"></p>
<hr>
<p>​    至此，hexo + github 搭建博客就算是成功了，恭喜！！</p>
<p>​    不过这只是最初的内容，其实还有好多内容，比如：怎样美化你的博客、更换主题；怎样添加各种小功能；怎样新建、删除文章；怎样搭建自己的图床等等！</p>
<p>​    但我实在是不想写了，写教程太累了，😭  看情况，之后有时间再补充吧！如果在搭建过程中遇到了问题，可以将错误内容复制到百度，搜一下，你肯定会看到解答的；因为你肯定不是第一个遇到问题的人，如果没有搜到，只能说，你搜索的姿势不对，可以考虑换个姿势再来一次，哈哈哈！</p>
<p>​    就这样吧！！</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Github</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new My New Post</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
