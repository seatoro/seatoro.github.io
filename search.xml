<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FFmpeg的简单使用</title>
    <url>/archives/d9d00a92.html</url>
    <content><![CDATA[<p>简单聊一聊FFmpeg的使用；</p>
<p>其有非常强大的功能：包括但不限于 视频采集功能、视频格式转换、视频抓图、给视频加水印等。<span id="more"></span></p>
<p><em>以下来源于百度百科：FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。</em></p>
<hr>
<h3 id="简单介绍一下使用方法："><a href="#简单介绍一下使用方法：" class="headerlink" title="简单介绍一下使用方法："></a>简单介绍一下使用方法：</h3><h3 id="应用场景1：格式转换"><a href="#应用场景1：格式转换" class="headerlink" title="应用场景1：格式转换"></a>应用场景1：格式转换</h3><p>我想把用iPhone拍的.MOV文件转成.avi文件。最简单了，可以执行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV D:\Media\output.avi  </span><br></pre></td></tr></table></figure>

<p>【意思是，把D:\Media目录下的源文件IMG_0873.MOV（视频：h.264，音频：aac）转换成output.avi（编码格式自动选择为：视频mpeg4，音频mp3），目标文件仍然保存到D:\Media目录下。】</p>
<p>问题来了：我想自己指定编码格式，怎么办呢？可通过目标文件的扩展名（.flv、.mpg、.mp4、.wmv等）来控制，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV D:\Media\output2.flv</span><br></pre></td></tr></table></figure>

<h3 id="应用场景2：调整大小"><a href="#应用场景2：调整大小" class="headerlink" title="应用场景2：调整大小"></a>应用场景2：调整大小</h3><p>若源文件的图像帧尺寸是1920x 1080，我不需要这么大——能有720 x 480就够了。于是，就要用上-s参数了。为了保证图像缩放后的质量，最好加上码流参数-b:v。如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -s 720x480 -b:v 1500k D:\Media\output2.avi</span><br></pre></td></tr></table></figure>

<h3 id="应用场景3：翻转视频"><a href="#应用场景3：翻转视频" class="headerlink" title="应用场景3：翻转视频"></a>应用场景3：翻转视频</h3><p>手机拍的视频中，有些是颠倒的，我想让它顺时针旋转90度。这时候，可以使用-vf参数加入一个过滤器，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -vf &quot;rotate=90*PI/180&quot; D:\Media\output3.avi</span><br></pre></td></tr></table></figure>

<p>注：如果想逆时针旋转90度，90前面加个负号就可以了。</p>
<h3 id="应用场景4：截取一段"><a href="#应用场景4：截取一段" class="headerlink" title="应用场景4：截取一段"></a>应用场景4：截取一段</h3><p>需要从源视频里截取一小段，怎么办呢？比如从第2秒的地方开始，往后截取10秒钟。命令行可以这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 2 -t 10 -i D:\Media\IMG_0873.MOV D:\Media\output4.avi</span><br></pre></td></tr></table></figure>

<p>注：这种情况下，-ss和-t参数必须放在-i前面，表示是限定后面跟着的输入文件的。</p>
<h3 id="应用场景5：视频合成"><a href="#应用场景5：视频合成" class="headerlink" title="应用场景5：视频合成"></a>应用场景5：视频合成</h3><p>用手机拍的视频有时候背景噪音比较大。怎么把噪音去掉，换成一段美妙的音乐呢？使用FFmpeg也能轻易做到。</p>
<p><em><strong>第一步：</strong></em>把源文件里的音频去掉，生成一个临时文件tmp.mov</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -vcodec copy -an D:\Media\tmp.mov</span><br></pre></td></tr></table></figure>

<p>注：-vcodec copy的意思是对源视频不解码，直接拷贝到目标文件；-an的意思是将源文件里的音频丢弃。</p>
<p><em><strong>第二步：</strong></em>把这个无声的视频文件（tmp.mov）与一个音乐文件（music.mp3）合成，最终生成output.mov</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\tmp.mov -ss 30 -t 52 -i D:\Media\music.mp3 -vcodec copy D:\Media\output5.avi</span><br><span class="line"></span><br><span class="line">ffmpeg.exe -i G:\test\removebgm.mp4 -ss 00:00:00.0 -t 00:03:31 -i G:\test\456.mp3 -acodec copy G:\test\hfdk.mp4</span><br></pre></td></tr></table></figure>

<p>为了保证良好的合成效果，音乐时长必须匹配视频时长。这里我们事先知道视频时长为52秒，于是截取music.mp3文件的第30秒往后的52秒与视频合成。另外，为了保证音频时长截取的准确性，我们这里没有使用-acodec copy，而是让音频重新转码。</p>
<p>还有一种情况：我们希望在一段视频上叠加一张图片（将视频画面全部显示该图片）。可以简单实现如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i D:\Media\IMG_0873.MOV -i D:\Media\logo.png -filter_complex   &#x27;overlay&#x27; D:\Media\output6.avi</span><br></pre></td></tr></table></figure>

<h3 id="应用场景6：视频播放"><a href="#应用场景6：视频播放" class="headerlink" title="应用场景6：视频播放"></a>应用场景6：视频播放</h3><p>格式转换或合成之后，我们需要试着播放一下。播放器的选择很多。这里顺手用ffplay工具也行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffplay -i D:\Media\output6.avi</span><br></pre></td></tr></table></figure>

<h3 id="应用场景7：获取视频信息"><a href="#应用场景7：获取视频信息" class="headerlink" title="应用场景7：获取视频信息"></a>应用场景7：获取视频信息</h3><p>有时候，我只是想看看这个视频文件的格式信息。可以用ffprobe工具：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffprobe -i D:\Media\IMG_0873.MOV</span><br></pre></td></tr></table></figure>

<h3 id="应用场景8：截取视频前3秒-并转化为gif"><a href="#应用场景8：截取视频前3秒-并转化为gif" class="headerlink" title="应用场景8：截取视频前3秒 并转化为gif"></a>应用场景8：截取视频前3秒 并转化为gif</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00:01 -t 3 -i 123.mp4 -vf crop=iw:ih*2/3 -s 320x240 -r 7 456.gif</span><br></pre></td></tr></table></figure>

<p>ps: -ss 00：00：01表示从视频第一秒开始截取  ;  - t 表示截图3秒钟的视频  ;   -vf crop=iw:ih*2/3 表示截取视频的部分区域，其中宽为视频宽度，高为原视频的2/3  ;     -r 7 表示每秒帧率为7帧  ; </p>
<h3 id="应用场景9：把AVI里的音频保存成mp3文件"><a href="#应用场景9：把AVI里的音频保存成mp3文件" class="headerlink" title="应用场景9：把AVI里的音频保存成mp3文件"></a>应用场景9：把AVI里的音频保存成mp3文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i source_video.avi -vn -ar 44100 -acodec libmp3lame -ac 2 -ab 192K -f mp3 sound.mp3</span><br></pre></td></tr></table></figure>

<h3 id="应用场景10：分离视频音频流"><a href="#应用场景10：分离视频音频流" class="headerlink" title="应用场景10：分离视频音频流"></a>应用场景10：<strong>分离视频音频流</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe -i G:\test\123.mp4 -f mp3 -vn G:\test\fgsiug.mp3</span><br><span class="line"></span><br><span class="line">ffmpeg.exe -i G:\test\123.mp4 -vn -codec copy G:\test\123.m4a</span><br><span class="line">//分离音频流      //  m4a 与 MP3 还不一样</span><br></pre></td></tr></table></figure>

<p><em>ps：以上来源于互联网以及FFmpeg官方文档</em></p>
<hr>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>附上FFmpeg官网链接：<a href="https://github.com/FFmpeg/FFmpeg">FFmpeg/FFmpeg: Mirror of https://git.ffmpeg.org/ffmpeg.git (github.com)</a></p>
]]></content>
      <tags>
        <tag>FFmpeg</tag>
        <tag>教程</tag>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown基础</title>
    <url>/archives/b797e99c.html</url>
    <content><![CDATA[<p>由于该博客的文章全部都是用markdown写的，所以就写一下MarkDown语法相关吧！<span id="more"></span></p>
<hr>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
<p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
<p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p>
<hr>
<p>Markdown 能被使用来撰写电子书，如：Gitbook。</p>
<p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</p>
<hr>
<p>教程网站：<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程 | 菜鸟教程</a></p>
<p>个人觉得好用的在线编辑网站：<a href="https://dillinger.io/">Online Markdown Editor - Dillinger, the Last Markdown Editor ever.</a></p>
<p>个人觉得好用的PC端MarkDown软件：<a href="https://www.typora.io/">Typora — a markdown editor, markdown reader.</a></p>
<hr>
<p>结束！！</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>干货</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（一）</title>
    <url>/archives/f6984ebe.html</url>
    <content><![CDATA[<h3 id="web前端-—-基础常用标签"><a href="#web前端-—-基础常用标签" class="headerlink" title="web前端 — 基础常用标签"></a>web前端 — 基础常用标签</h3><p><strong>这是之前的学习记录，整理一下，放到这儿吧！</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<ul>
<li>创建初始代码：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">! + tab键</span><br></pre></td></tr></table></figure>

<ul>
<li>快捷加注释与删除注释</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ctrl + /</span><br></pre></td></tr></table></figure>

<ul>
<li>一个网页中只能出现一次<code>h1</code>标签，<code>h5、h6</code>标签不常用</li>
<li>下标  <code>&lt;sub&gt;&lt;/sub&gt;</code>      上标  <code>&lt;sup&gt;&lt;/sup&gt;</code><pre><code>  删除  `&lt;del&gt;&lt;/del&gt;`     插入  `&lt;ins&gt;&lt;/ins&gt;`
</code></pre>
</li>
<li><code> base</code>标签（单标签）：改变链接默认行为。写在head中 <code> &lt;base target＝&quot;_blank&quot;&gt;</code>为打开新的页面。</li>
<li>跳转锚点：# &amp; id</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>     <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>html特殊符号：</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/特殊含义字符.jpg" style="zoom: 67%;" />

<ul>
<li><p>表格属性：cellpadding —&gt;单元格内空间      cellspacing —&gt;单元格之间空间         valign —&gt;上下对齐方式        caption —&gt;表格标题。</p>
</li>
<li><table>
<thead>
<tr>
<th>type属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>普通文本输入框</td>
</tr>
<tr>
<td>password</td>
<td>密码输入框</td>
</tr>
<tr>
<td>checkbox</td>
<td>复选框</td>
</tr>
<tr>
<td>radio</td>
<td>单选框</td>
</tr>
<tr>
<td>file</td>
<td>上传文件</td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮</td>
</tr>
<tr>
<td>reser</td>
<td>重置按钮</td>
</tr>
</tbody></table>
<p>注：默认复选框就选中有 用：checked属性，要使其不能选 用：disable属性；</p>
</li>
<li><p>文本框中显示提示信息：<code>placeholder</code>     </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>  多行文本框</span><br></pre></td></tr></table></figure></li>
<li><p>下拉菜单使 “其它” 显示在框中用：selected属性，要使选项选择不了用：disable属性。</p>
</li>
<li><p>label标签辅助，使鼠标点击范围广，用<code>&lt;label&gt;&lt;/label&gt;</code>将其包住。如：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;woman&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（七）-- 贝塞尔曲线的原理</title>
    <url>/archives/6b06ff63.html</url>
    <content><![CDATA[<h3 id="web前端-—-贝塞尔曲线的原理"><a href="#web前端-—-贝塞尔曲线的原理" class="headerlink" title="web前端 — 贝塞尔曲线的原理"></a>web前端 — 贝塞尔曲线的原理</h3><p><strong>今天继续第七篇</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<p>在 CSS 动画里，我们可以用 <code>cubic-bezier</code> 来定义贝塞尔曲线。 曲线的形状代表了动画的速度。 曲线在 1 * 1 的坐标系统内， 其中 X 轴代表动画的时间间隔（类似于时间比例尺），Y 轴代表动画的改变。</p>
<p><code>cubic-bezier</code> 函数包含了 1 * 1 网格里的4个点：<code>p0</code>、<code>p1</code>、<code>p2</code>、<code>p3</code>。 其中 <code>p0</code> 和 <code>p3</code> 是固定值，代表曲线的起始点和结束点，坐标值依次为 (0, 0) 和 (1, 1)。 你只需设置另外两点的 x 值和 y 值，设置的这两点确定了曲线的形状从而确定了动画的速度曲线。 在 CSS 里面通过 <code>(x1, y1, x2, y2)</code> 来确定 <code>p1</code> 和 <code>p2</code>。 如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.25</span>, <span class="number">0.25</span>, <span class="number">0.75</span>, <span class="number">0.75</span>);</span><br></pre></td></tr></table></figure>

<p>上面例子中两个点的 x 和 y 值相等（x1 = 0.25 = y1 和 x2 = 0.75 = y2）。结合数学的知识，我们可以看出结果是从原点到点 (1, 1) 的一条直线。 元素在动画中的速度呈线性，效果和使用 <code>linear</code> 关键词的效果一致。 换言之，元素匀速运动。</p>
<p>将一条直线放在范围只有 1 的坐标轴中，并从中间拿 <code>p1</code> 和 <code>p2</code> 两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的贝塞尔速度曲线。 下面是贝塞尔曲线模仿 ease-out 预定义值的例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.58</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>所有的 <code>cubic-bezier</code> 函数都是从坐标为 (0, 0) 的 <code>p0</code> 开始，在坐标为 (1, 1) 的 <code>p3</code> 结束。 在上面这个例子里，曲线在 y 轴（从 0 开始，运动到 <code>p1</code> 的 0，然后运动到 <code>p2</code> 的 1）上移动得比在 x 轴（从 0 开始，运动到 <code>p1</code> 的 0，到 <code>p2</code> 的 0.58）上移动得快。 结果是，在这一段动画内元素运动得快。 到曲线的结尾，x 和 y 之间的关系反过来了，y 值保持为 1，没有变化，x 值从 0.58 变为 1，元素运动得慢。</p>
<hr>
<p><strong>自定义曲线：<a href="http://cubic-bezier.com/">http://cubic-bezier.com</a></strong></p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（二）</title>
    <url>/archives/c68ea266.html</url>
    <content><![CDATA[<h3 id="web前端-—-字体、边框、背景"><a href="#web前端-—-字体、边框、背景" class="headerlink" title="web前端 —  字体、边框、背景"></a>web前端 —  字体、边框、背景</h3><p><strong>今天继续第二篇</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<h4 id="字体-–-字体相关"><a href="#字体-–-字体相关" class="headerlink" title="字体 – 字体相关"></a>字体 – 字体相关</h4><ul>
<li><p>字体大小一般为偶数</p>
</li>
<li><p>字体粗细用：<code>font-weight</code>；数值区间为：100 ~ 900，其中100 ~ 500为正常，600~900为加粗；</p>
</li>
<li><p>模式：<code>normal（正常）</code>，<code>bold（加粗）</code>；</p>
</li>
<li><p>中英文字体：英文字体只支持英文，中文字体有些支持英文。</p>
</li>
<li><p>设置多字体的方式：字体之间用逗号隔开，先识别前边的；若计算机中没有该字体，则向后识别。</p>
</li>
<li><p>引号问题：若字体中含有空格，则需要加空格。</p>
</li>
</ul>
<h4 id="边框-–-使用CSS实现圆角"><a href="#边框-–-使用CSS实现圆角" class="headerlink" title="边框 – 使用CSS实现圆角"></a>边框 – 使用CSS实现圆角</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123; <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">200px</span>; <span class="attribute">background</span>:red; <span class="attribute">border-radius</span>: <span class="number">100px</span>; &#125;</span><br><span class="line"><span class="attribute">border-radius</span>为一个值时，对四个角都生效；</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">300px</span>; <span class="attribute">background</span>:red; <span class="attribute">border-radius</span>: <span class="number">50%</span>; &#125;</span><br><span class="line"><span class="attribute">border-radius</span>为<span class="number">50%</span>时为圆；</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">300px</span>; <span class="attribute">background</span>:red; <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="attribute">border-radius</span>为两个值时，对两个对角生效；</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">300px</span>; <span class="attribute">background</span>:red; <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>; &#125;</span><br><span class="line"><span class="attribute">border-radius</span>为四个值时，分别对四个角生效；顺序为：左上、右上、右下、左下；</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">300px</span>; <span class="attribute">background</span>:red; <span class="attribute">border-radius</span>: <span class="number">20px</span> / <span class="number">40px</span>; &#125;</span><br><span class="line"><span class="attribute">border-radius</span>为比值时，根据比值不同，形状不同；此例为椭圆；</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#box</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">150px</span>; <span class="attribute">background</span>:red; <span class="attribute">border-radius</span>: <span class="number">150px</span> <span class="number">150px</span> <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="attribute">border-radius</span>的左上、右上与<span class="attribute">height</span>值相同时，为半圆；</span><br></pre></td></tr></table></figure>

<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul>
<li>背景的位置：<code>background-position: 100px 20px;</code> <code> background-position: centre center;</code> <code> background-position: 50% 50%;</code>，即 background-position 后边可加像素、单词、百分比；</li>
<li>背景的移动：<code>backdround-attachment</code>，其后可加<code>scroll（默认，按当前元素进行偏移）</code> <code>fixed（固定，按浏览器进行偏移；）</code>   可用此实现视觉差网页！</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（三）</title>
    <url>/archives/8b900134.html</url>
    <content><![CDATA[<h3 id="web前端-—-段落样式、默认样式去除与最小最大宽高"><a href="#web前端-—-段落样式、默认样式去除与最小最大宽高" class="headerlink" title="web前端 — 段落样式、默认样式去除与最小最大宽高"></a>web前端 — 段落样式、默认样式去除与最小最大宽高</h3><p><strong>今天继续第三篇</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<h3 id="段落样式"><a href="#段落样式" class="headerlink" title="段落样式"></a>段落样式</h3><ul>
<li>下划线  <code>text-decoration: underline;</code></li>
<li>上划线  <code>text-decoration: overline;</code></li>
<li>删除线  <code>text-decoration: line-through;</code></li>
<li>不加装饰  <code>none</code> ； 添加多个可用逗号<code>,</code>隔开</li>
<li>针对英文的大小写  <code>text-transform:lowercase</code>（小写）与 <code>text-transform:uppercase</code>（大写）；若只针对首字母用  <code>text-transform:capitalize</code></li>
<li>首行缩进  <code>text-indent</code>  相对单位：em单位，1em 表示总是与字体大小相同。</li>
<li>文本对齐方式  <code>text-align:</code>+<code> left(左对齐)  rigjht(右对齐)  center(居中)  justify(两端点对齐)</code></li>
<li>定义字间距  <code>letter-spacing</code>，对英文的词间距  <code>word-spacing</code></li>
<li>强制折行（针对英文和数字）  <code>word-break:  break-all（强烈折行）</code> 与 <code>word-wrap：break-word（非强烈折行：即某单词放不下自动放到第二行显示，会在上一行产生空白区域）</code></li>
</ul>
<h3 id="默认样式去除"><a href="#默认样式去除" class="headerlink" title="默认样式去除"></a>默认样式去除</h3><ul>
<li><p>一般常用的有：更多参看 <a href="https://blog.csdn.net/brain_bo/article/details/81560444">reset.css初始化设置</a></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;  <span class="attribute">padding</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none; <span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">display</span>:block;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>实际问题现象：图片跟容器底部有一些空隙</p>
<p>解决办法：这是因为，内联元素的对齐方式是按照文字基线对齐的而不是底线，所以用 <code>vertical-align: baseline;</code>或<code>vertical-align: bottom;</code>解决；也可用<code>img&#123;display:block;&#125;</code>来解决。</p>
<ul>
<li>所以，写具体页面或布局效果时，一般步骤为：<ol>
<li>写结构</li>
<li>css重置</li>
<li>写具体样式</li>
</ol>
</li>
</ul>
<h3 id="最小最大宽高"><a href="#最小最大宽高" class="headerlink" title="最小最大宽高"></a>最小最大宽高</h3><ul>
<li><p>最小高度  <code>min-height  </code></p>
</li>
<li><p>最大高度  <code>max-height</code></p>
</li>
<li><p>最小宽度  <code>min-width</code></p>
</li>
<li><p>最大宽度  <code>max-widrh</code></p>
<p>若要使容器适应屏幕的高则：容器加上 <code>height : 100%;  body : 100%;</code></p>
<p>注：%单位：以父容器（不能以祖先元素）大小进行换算。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（五）</title>
    <url>/archives/5323dd16.html</url>
    <content><![CDATA[<h3 id="web前端-—-定位与浮动"><a href="#web前端-—-定位与浮动" class="headerlink" title="web前端 — 定位与浮动"></a>web前端 — 定位与浮动</h3><p><strong>今天继续第五篇</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul>
<li>相对定位 — relative</li>
</ul>
<p>把元素的位置设置成相对，并不会改变该元素在布局中所占的位置，也不会对其它元素的位置产生影响。</p>
<ul>
<li>绝对定位 — absolute</li>
</ul>
<p>绝对定位比较特殊的一点是：元素的定位参照于最近的 <em>positioned</em> 祖先元素。 如果它的父元素没有添加定位规则（默认是 <code>position: relative;</code>），浏览器会继续寻找直到默认的 <code>body</code> 标签。</p>
<ul>
<li>fixed定位</li>
</ul>
<p><code>fixed</code> 定位，它是一种特殊的绝对（<code>absolute</code>）定位，将元素相对于浏览器窗口定位。 类似于绝对位置，它与 <code>CSS</code> 偏移属性一起使用，并且也会将元素从当前的文档流里面移除。 其它元素会忽略它的存在，这样也许需要调整其他位置的布局。但 <code>fixed</code> 和 <code>absolute</code> 的最明显的区别在于：前者定位的元素不会随着屏幕滚动而移动。</p>
<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>浮动元素不在文档流中，它向 <code>left</code> 或 <code>right</code> 浮动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 通常需要用 <code>width</code> 属性来指定浮动元素占据的水平空间。</p>
<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>当一些元素在位置上重叠时（例如，使用 <code>position: absolute | relative | fixed | sticky</code> 时），在 HTML 里后出现的元素会默认显示在更早出现的元素的上面。 你可以使用 <code>z-index</code> 属性指定元素的堆叠次序。 <code>z-index</code> 的取值是整数，数值大的元素会叠放到数值小的元素上面。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（八）-- 动画与伪元素</title>
    <url>/archives/2950d584.html</url>
    <content><![CDATA[<h3 id="web前端-—-动画与伪元素"><a href="#web前端-—-动画与伪元素" class="headerlink" title="web前端 —  动画与伪元素"></a>web前端 —  动画与伪元素</h3><p><strong>今天继续第八篇</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<h3 id="1-伪元素-–-after-和-before"><a href="#1-伪元素-–-after-和-before" class="headerlink" title="1. 伪元素 –:after 和 :before"></a>1. 伪元素 –<code>:after 和 :before</code></h3><p><code>M:伪类｛｝</code></p>
<p><code>:link</code>  访问前的样式</p>
<p><code>:visited</code> 访问后的样式</p>
<p><code>:hover</code>   鼠标移入的样式</p>
<p><code>:active</code>   鼠标按下时的样式</p>
<p>注：如果四个伪类都生效，要注意顺序：L V H A</p>
<hr>
<p><code>::before</code> 和 <code>::after</code> 必须配合 <code>content</code> 来使用。 这个属性通常用来给元素添加内容诸如图片或者文字。 尽管有时 <code>::before</code> 和 <code>::after</code> 是用来实现形状而非文字，但 <code>content</code> 属性仍然是必需的，此时它的值可以是空字符串。</p>
<p>如，用伪元素画颗心：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.heart</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.heart</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.heart</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;heart&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-动画"><a href="#2-动画" class="headerlink" title="2. 动画"></a>2. 动画</h3><p><code>animation-name</code> 用来设置动画的名称，也就是我们稍后要在 <code>@keyframes</code> 里用到的名称。</p>
<p><code>animation-duration</code> 设置动画所花费的时间。</p>
<p> <code>animation-fill-mode</code> 指定了在动画结束时元素的样式。</p>
<p><strong>属性：none(默认值):在运动结束之后回到初始位置，在延迟情况下，让0%在延迟后生效</strong></p>
<p><strong>backwards: 在延迟的情况下，让0%在延迟前生效</strong></p>
<p><strong>forwards: 在运动结束后停到结束位置</strong></p>
<p><strong>both: backwards和forwards同时生效</strong></p>
<p><code>@keyframes</code> 可以通过设置特定时间点的行为来创建动画。 因此，我们只需要给持续时间内的特定帧（从 0% 到 100%）加上 CSS 规则。如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">按钮鼠标移入变色并保持</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0F5897</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">8px</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation-name</span>: background-color;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">500ms</span>;</span><br><span class="line">    <span class="attribute">animation-fill-mode</span>:forwards;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> background-color &#123;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#4791d0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">button</span>&gt;Register&lt;/<span class="selector-tag">button</span>&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">方块变色并斜向移动</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#rect</span> &#123;</span><br><span class="line">    <span class="attribute">animation-name</span>: rainbow;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">4s</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> rainbow &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: blue;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: green;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">      <span class="attribute">left</span>:<span class="number">25px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: yellow;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">      <span class="attribute">left</span>:-<span class="number">25px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;rect&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<p><code>animation-iteration-count</code>，这个属性允许你控制动画循环的次数。</p>
<p>当其值为<code>infinite</code>是，无限循环，为具体数字时，表示循环次数。</p>
<p><code>animation-timing-function</code> 用来定义动画的速度曲线。 </p>
<p>速度曲线决定了动画从一套 CSS 样式变为另一套所用的时间。 如果要描述的动画是一辆车在指定时间内（<code>animation-duration</code>）从 A 运动到 B，那么 <code>animation-timing-function</code> 表述的就是车在运动中的加速和减速等过程。</p>
<p>有一些预定义的关键字可用于常见的选项。 比如，默认值是 <code>ease</code>，动画以低速开始，然后加快，在结束前变慢。 其它常用的值包括 <code>ease-out</code>：动画以高速开始，以低速结束；<code>ease-in</code>，动画以低速开始，以高速结束；<code>linear</code>：动画从头到尾的速度是相同的。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（六）-- CSS网格</title>
    <url>/archives/2da26f8.html</url>
    <content><![CDATA[<h3 id="web前端-—-CSS网格与媒体查询"><a href="#web前端-—-CSS网格与媒体查询" class="headerlink" title="web前端 —  CSS网格与媒体查询"></a>web前端 —  CSS网格与媒体查询</h3><p><strong>今天继续第六篇</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<h3 id="1-基础网格"><a href="#1-基础网格" class="headerlink" title="1. 基础网格"></a>1. 基础网格</h3><p>通过将属性 <code>display</code> 的值设为 <code>grid</code>，HTML 元素就可以变为网格容器。</p>
<p><em>注意： 在 CSS 网格中，父元素称为容器（container），它的子元素称为项（items）</em></p>
<p>简单地添加一个网格元素并不会有任何明显的效果，还需要明确网格的结构。 在一个网格容器中使用 <code>grid-template-columns</code> 属性可以添加一些<strong>列</strong>，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码会在网格容器中添加<strong>两列</strong>，宽度均为 50px。 <code>grid-template-columns</code> 属性值的个数表示网格的列数，每个值表示相应的列宽度；类似的<code>grid-template-rows</code> 属性则调整网格<strong>行</strong>数的高度。如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-rows: <span class="number">50px</span> <span class="number">50px</span>;</span><br></pre></td></tr></table></figure>

<p>上面的代码会使两行高度变为50px</p>
<hr>
<h3 id="2-单位"><a href="#2-单位" class="headerlink" title="2. 单位"></a>2. 单位</h3><p>在 CSS 网格中，可以使用绝对单位（如 <code>px</code>）或相对单位（如 <code>em</code>）来定义行或列的大小。 下面的单位也可以使用：</p>
<p><code>em</code>：相对于父级元素的font-size计算而来；【 本级元素字体大小（单位为px）= 父级元素的字体大小（单位转化为px）* 本级元素em的值。如：父级元素：10px，子级元素的1em相当于 10px * 1 = 10px; 】；</p>
<p><code>fr</code>：设置列或行占剩余空间的比例；</p>
<p><code>auto</code>：设置列宽或行高自动等于它的内容的宽度或高度；</p>
<p><code>%</code>：将列或行调整为它的父级元素宽度或高度的百分比；</p>
<p>那么，结合上面的内容，我们可以得到：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: auto <span class="number">50px</span> <span class="number">10%</span> <span class="number">2</span>fr <span class="number">1</span>fr;</span><br></pre></td></tr></table></figure>

<p>上面这段代码添加了五个列：第一列的宽与它的内容宽度相等；第二列宽 50px；第三列宽是它容器的 10%；最后两列，将剩余的宽度平均分成三份，第四列占两份，第五列占一份。</p>
<p>PS：视窗单位：</p>
<p>四个不同的视窗单位分别是：</p>
<ul>
<li><code>vw</code>：如 <code>10vw</code> 的意思是视窗宽度的 10%。</li>
<li><code>vh：</code> 如 <code>3vh</code> 的意思是视窗高度的 3%。</li>
<li><code>vmin：</code> 如 <code>70vmin</code> 的意思是视窗的高度和宽度中较小一个的 70%。</li>
<li><code>vmax：</code> 如 <code>100vmax</code> 的意思是视窗的高度和宽度中较大一个的 100%。</li>
</ul>
<hr>
<h3 id="3-网格间距"><a href="#3-网格间距" class="headerlink" title="3. 网格间距"></a>3. 网格间距</h3><ul>
<li>目前为止，我们所创建的网格中，<strong>每列</strong>都相互紧挨着。 那怎样使<strong>列</strong>之间有间距呢？ 我们可以使用 <code>grid-column-gap</code>：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-<span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br></pre></td></tr></table></figure>

<p>上面这段代码会为我们创建的<strong>所有列</strong>之间都添加 10px 的空白间距。</p>
<ul>
<li>类似的，我们可以用 <code>grid-row-gap</code> 设置<strong>行</strong>间距。</li>
<li><code>grid-gap</code> 属性是上面出现的 <code>grid-row-gap</code> 和 <code>grid-column-gap</code> 的<strong>简写</strong>属性，它更方便使用。 如果 <code>grid-gap</code> 只有一个值，那么这个值表示行与行之间、列与列之间的间距均为这个值。 如果有两个值，那么第一个值表示行间距，第二个值表示列间距。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-gap: <span class="number">20px</span> <span class="number">1</span>fr;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-网格合并"><a href="#4-网格合并" class="headerlink" title="4. 网格合并"></a>4. 网格合并</h3><ul>
<li>要设置一个网格项占据几<strong>列</strong>，可以使用 <code>grid-column</code> 属性加上网格线条的编号来定义网格项开始和结束的位置。如下：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-column: <span class="number">1</span> / <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>这会让网格项从<strong>左侧</strong>第一条线开始到第三条线结束，占用<strong>两列</strong>。类似的，可以使用 <code>grid-row</code> 属性来定义一个网格项开始和结束的水平线，即设置网格占几<strong>行</strong>。</p>
<hr>
<h3 id="5-对其方式"><a href="#5-对其方式" class="headerlink" title="5. 对其方式"></a>5. 对其方式</h3><ul>
<li><p><code>justify-self</code> 属性，可设置其内容的位置在单元格内沿水平轴的对齐方式。 默认情况下，这个属性的值是 <code>stretch</code>，这将使内容占满整个单元格的宽度。</p>
<p>该 CSS 网格属性也可以使用其他的值：</p>
<p><code>start</code>：使内容在单元格左侧对齐，</p>
<p><code>center</code>：使内容在单元格居中对齐，</p>
<p><code>end</code>：使内容在单元格右侧对齐，</p>
</li>
<li><p>可用 <code>align-self</code> 属性来实现竖直对其；在上面适用于 <code>justify-self</code> 属性的属性值同样也可用于这个属性。</p>
</li>
<li><p>另外，还可以对网格容器使用 <code>justify-items</code> 使它们<strong>一次性沿水平轴对齐</strong>。 这个属性能接受上面对齐方式中所有值作为属性值，但与之前不同的是，它会将网格中<strong>所有</strong>的网格项按所设置的方式对齐。</p>
</li>
<li><p>还可以对网格容器使用 <code>align-items</code> 属性可以让网格中<strong>所有</strong>的网格项沿<strong>竖直方向</strong>对齐，属性值同上。</p>
</li>
</ul>
<hr>
<h3 id="6-单元格合并"><a href="#6-单元格合并" class="headerlink" title="6. 单元格合并"></a>6. 单元格合并</h3><ul>
<li><p>将网格中的一些单元格组合成一个区域（area），并为该区域指定一个自定义名称。 可以通过给容器加上 <code>grid-template-areas</code> 来实现：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-areas:</span><br><span class="line">  <span class="string">&quot;header header header&quot;</span></span><br><span class="line">  <span class="string">&quot;advert content content&quot;</span></span><br><span class="line">  <span class="string">&quot;footer footer footer&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>上面的代码将网格单元格分成四个区域：<code>header</code>、<code>advert</code>、<code>content</code> 和 <code>footer</code>。 每个单词代表一个单元格，每对引号代表一行。</p>
</li>
<li><p>在为网格添加区域模板后，可以通过引用你自己所定义的区域的名称，将元素放入相应的区域。 因此，你需要对网格项使用 <code>grid-area</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item5</span> &#123;</span><br><span class="line">  grid-area: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，class 为 <code>item5</code> 的网格项就被放到了 <code>footer</code> 区域里。（由上面的代码可知，就是最下面那一行）</p>
<img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/css-grid.gif" style="zoom:67%;" />

<center>注：5原来是在2列2行，更改后变为了最下边一行。</center></li>
</ul>
<hr>
<h3 id="7-repeat方法"><a href="#7-repeat方法" class="headerlink" title="7. repeat方法"></a>7. repeat方法</h3><ul>
<li>使用 <code>grid-template-columns</code> 或 <code>grid-template-rows</code> 定义网格结构时，你需要为添加的每一行或每一列都输入一个值。如果一个网格共有 100 行且每行高度相同， 那我们就需要输入 100 个值，这显然不太实际。 为此，更好的方式是使用 <code>repeat</code> 方法指定行或列的重复次数，后面加上逗号以及需要重复的值。</li>
</ul>
<p>以下为添加 100 行网格的例子，每<strong>行</strong>高度均为 50px：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-rows: <span class="built_in">repeat</span>(<span class="number">100</span>, <span class="number">50px</span>);</span><br></pre></td></tr></table></figure>

<p>还可以用 repeat 方法重复多个值，并在定义网格结构时与其他值一起使用。 比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr <span class="number">50px</span>) <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<p>效果相当于：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">50px</span> <span class="number">1</span>fr <span class="number">50px</span> <span class="number">20px</span>;</span><br></pre></td></tr></table></figure>

<p><strong>即</strong> <code>1fr 50px</code> 重复了两次，后面跟着 20px。</p>
<hr>
<h3 id="8-最大与最小"><a href="#8-最大与最小" class="headerlink" title="8. 最大与最小"></a>8. 最大与最小</h3><ul>
<li>内置函数 <code>minmax</code> 可用于设置 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 的值。 它的作用是在网格容器改变大小时限制网格项的大小。 为此，需要指定网格项允许的尺寸范围。 例如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="built_in">minmax</span>(<span class="number">50px</span>, <span class="number">200px</span>);</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们通过 <code>grid-template-columns</code> 添加了两列，第一列宽度为100px，第二列宽度最小为50px，最大为200px。</p>
<ul>
<li>该函数还可与repeat一起用： </li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="built_in">minmax</span>(<span class="number">90px</span>,<span class="number">1</span>fr));</span><br></pre></td></tr></table></figure>

<ul>
<li><code>auto-fill</code> 功能： repeat 方法带有一个名为自动填充（auto-fill）的功能。 它的功能是根据容器的大小，尽可能多地放入指定大小的行或列。 可以通过结合 <code>auto-fill</code> 和 <code>minmax</code> 来更灵活地布局。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">repeat(<span class="attribute">auto</span>-fill, minmax(<span class="number">60px</span>, <span class="number">1</span>fr));</span><br></pre></td></tr></table></figure>

<ul>
<li><p>上面的代码效果是这样：首先，列的宽度会随容器大小改变。其次，只要容器宽度不足以插入一个宽为 60px 的列，当前行的所有列就都会一直向下拉伸。<strong>注意：</strong> 如果容器宽度不足以将所有网格项放在同一行，余下的网格项将会移至新的一行。</p>
</li>
<li><p><code>auto-fit</code>功能：其效果几乎和 <code>auto-fill</code> 一样。 不同点仅在于，当容器的大小大于各网格项之和时，<code>auto-fill</code> 会持续地在一端放入空行或空列，这样就会使所有网格项挤到另一边；而 <code>auto-fit</code> 则不会在一端放入空行或空列，而是会将所有网格项拉伸至合适的大小。<strong>注意：</strong> 如果容器宽度不足以将所有网格项放在同一行，余下的网格项将会移至新的一行。</p>
</li>
</ul>
<hr>
<h3 id="9-媒体查询"><a href="#9-媒体查询" class="headerlink" title="9. 媒体查询"></a>9. 媒体查询</h3><ul>
<li><p>媒体查询是 CSS3 中引入的一项新技术，它可以根据不同的视口大小调整内容的布局。 视口是指浏览器中，用户可见的网页内容。 视口会随访问网站的设备不同而改变。</p>
</li>
<li><p>媒体查询由媒体类型组成，如果媒体类型与展示网页的设备类型匹配，则应用对应的样式。 你可以在媒体查询中使用各种选择器和样式。</p>
</li>
</ul>
<p>下面是一个媒体查询的例子，当设备高度小于或等于 <code>800px</code> 时返回内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;	</span><br><span class="line">	<span class="keyword">@media</span> (<span class="attribute">max-height</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">	<span class="selector-tag">p</span>&#123;</span><br><span class="line">		<span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;这是一个段落&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>将 CSS 网格与使用媒体查询结合使用，如使用媒体查询重新排列网格区域、更改网格尺寸以及重新排列网格项位置，可以让制作出的网站更具响应性。如：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.item1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: LightSkyBlue;</span><br><span class="line">    grid-area: header;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item2</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: LightSalmon;</span><br><span class="line">    grid-area: advert;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item3</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: PaleTurquoise;</span><br><span class="line">    grid-area: content;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item4</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: lightpink;</span><br><span class="line">    grid-area: footer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: LightGray;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr;</span><br><span class="line">    grid-template-rows: <span class="number">50px</span> auto <span class="number">1</span>fr auto;</span><br><span class="line">    grid-gap: <span class="number">10px</span>;</span><br><span class="line">    grid-template-areas:</span><br><span class="line">      <span class="string">&quot;header&quot;</span></span><br><span class="line">      <span class="string">&quot;advert&quot;</span></span><br><span class="line">      <span class="string">&quot;content&quot;</span></span><br><span class="line">      <span class="string">&quot;footer&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">300px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.container</span>&#123;</span><br><span class="line">      grid-template-<span class="attribute">columns</span>: auto <span class="number">1</span>fr;</span><br><span class="line">      grid-template-rows: auto <span class="number">1</span>fr auto;</span><br><span class="line">      grid-template-areas:</span><br><span class="line">        <span class="string">&quot;advert header&quot;</span></span><br><span class="line">        <span class="string">&quot;advert content&quot;</span></span><br><span class="line">        <span class="string">&quot;advert footer&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">400px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.container</span>&#123;</span><br><span class="line">      grid-template-areas:</span><br><span class="line">        <span class="string">&quot;header header&quot;</span></span><br><span class="line">        <span class="string">&quot;advert content&quot;</span></span><br><span class="line">        <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item1&quot;&gt;<span class="selector-tag">header</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item2&quot;&gt;advert&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item3&quot;&gt;<span class="attribute">content</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item4&quot;&gt;<span class="selector-tag">footer</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="10-图片自适应"><a href="#10-图片自适应" class="headerlink" title="10. 图片自适应"></a>10. 图片自适应</h3><p>只需要给图片添加这些属性:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置 <code>max-width</code> 值为 <code>100%</code> 可确保图片不超出父容器的范围；设置 <code>height</code> 属性为 <code>auto</code> 可以保持图片的原始宽高比。</p>
<hr>
<h3 id="11-嵌套元素"><a href="#11-嵌套元素" class="headerlink" title="11. 嵌套元素"></a>11. 嵌套元素</h3><p>将元素转换为网格只会影响其子元素（即直接后代元素，英文为 direct descendants。意思是一个元素的所有后代元素中，父级元素为该元素的所有元素）。 因此，如果我们把某个子元素设置为网格，就会得到一个嵌套的网格。</p>
<p>例如，如果我们设置 class 为 <code>item3</code> 的元素的 <code>display</code> 和 <code>grid-template-columns</code> 属性，就会得到一个嵌套的网格。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: LightGray;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: auto <span class="number">1</span>fr;</span><br><span class="line">    grid-template-rows: auto <span class="number">1</span>fr auto;</span><br><span class="line">    grid-gap: <span class="number">10px</span>;</span><br><span class="line">    grid-template-areas:</span><br><span class="line">      <span class="string">&quot;advert header&quot;</span></span><br><span class="line">      <span class="string">&quot;advert content&quot;</span></span><br><span class="line">      <span class="string">&quot;advert footer&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item1</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: LightSkyBlue;</span><br><span class="line">    grid-area: header;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item2</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: LightSalmon;</span><br><span class="line">    grid-area: advert;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item3</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: PaleTurquoise;</span><br><span class="line">    grid-area: content;</span><br><span class="line">	<span class="attribute">display</span>:grid;</span><br><span class="line">	grid-template-<span class="attribute">columns</span>:auto <span class="number">1</span>fr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.item4</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: lightpink;</span><br><span class="line">    grid-area: footer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.itemOne</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: PaleGreen;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.itemTwo</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: BlanchedAlmond;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item1&quot;&gt;<span class="selector-tag">header</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item2&quot;&gt;advert&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item3&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;itemOne&quot;&gt;paragraph1&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;itemTwo&quot;&gt;paragraph2&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;item4&quot;&gt;<span class="selector-tag">footer</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端记录（四）</title>
    <url>/archives/3cbd1851.html</url>
    <content><![CDATA[<h3 id="web前端-—-优先级、css变量"><a href="#web前端-—-优先级、css变量" class="headerlink" title="web前端 — 优先级、css变量"></a>web前端 — 优先级、css变量</h3><p><strong>今天继续第四篇</strong></p>
<p><strong>注：以下以及之后文章中用到的软件均为<code> Visual Studio Code</code></strong></p>
<span id="more"></span>

<hr>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul>
<li><p>id 的优先级高于 class，无论 id 在 class 前或者后</p>
</li>
<li><p>在头部 style 中下边 class 优先级高于上边，即上边的样式会被下边的覆盖</p>
</li>
<li><p>正文的标签中 class 可设置多个，之间用空格隔开（该 class 先后顺序不分优先级）</p>
</li>
<li><p>内联样式（元素内style）的优先级高于所有上边 css 中的声明，即会覆盖上边 css 中的样式。</p>
</li>
<li><p>在 css 样式后加<code>!important</code>，则优先级最高</p>
</li>
</ul>
<hr>
<h3 id="自定义css变量"><a href="#自定义css变量" class="headerlink" title="自定义css变量"></a>自定义css变量</h3><p>定义变量：<code>-- + 变量名 + ： + 属性</code> 如：<code>--penguin-skin：pink;</code></p>
<p>引用变量：如 <code>background: var(--penguin-skin)；</code>（所有引用变量的元素都会改变。）</p>
<p>使用变量来作为 CSS 属性值的时候，可以设置一个备用值来防止由于某些原因导致变量不生效的情况。</p>
<p>如：<code>background: var(--penguin-skin, black);</code>（如果变量不生效或者没有设置，则使用后面的 black 样式；这对调试代码很有帮助）</p>
<p><strong>注意：</strong> 备用值不是用于增强浏览器的兼容性，它也不适用于 IE 浏览器。 相反，它是用来让浏览器在找不到你的变量时可以显示一种颜色。</p>
<hr>
<h3 id="变量的继承性"><a href="#变量的继承性" class="headerlink" title="变量的继承性"></a>变量的继承性</h3><p>当创建一个变量时，变量会在创建变量的选择器里可用。 同时，在这个选择器的后代选择器里也是可用的。 这是因为 CSS 变量是可继承的，和普通的属性一样。</p>
<p>CSS 变量经常会定义在  :root  元素内，这样就可被所有选择器继承。 <code>:root</code> 是一个伪类选择器，它是一个能够匹配文档根元素的选择器，通常指的是 <code>html</code> 元素。 我们在 <code>:root</code> 里创建变量在全局都可用，即在任何选择器里都生效。</p>
<p>当你在 <code>:root</code> 里创建变量时，这些变量的作用域是整个页面。如果在元素里创建相同的变量，会重写（覆盖）作用于该元素的变量的值。</p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World!</title>
    <url>/archives/1c291ca3.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>中秋节快乐</title>
    <url>/archives/9d77eb79.html</url>
    <content><![CDATA[<center><h3>又到一年中秋时，发个文章纪念一下</h3></center>

<span id="more"></span>

<center><h3>我在这里祝看到这篇文章的陌生人,也祝我和我的家人朋友中秋节快乐！</h3></center>

</br>

<img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/zqj.png" style="zoom:50%;" />
]]></content>
      <tags>
        <tag>中秋节快乐</tag>
      </tags>
  </entry>
  <entry>
    <title>免VIP复制百度文库内容</title>
    <url>/archives/631e63b6.html</url>
    <content><![CDATA[<p>今天发一下 4 种我自己知道的免VIP复制网页内容的方法</p>
<p>以下方法都是截止我发文时，自己测试管用的！</p>
<span id="more"></span>

<hr>
<ul>
<li><h3 id="利用开发者工具"><a href="#利用开发者工具" class="headerlink" title="利用开发者工具"></a>利用开发者工具</h3></li>
</ul>
<p>在遇到不可复制的网页内容时，可鼠标右键，选择 “检查”，打开 “开发者模式” ，在 “元素” 中向下滑动可以找到你要复制的内容；不过，都是一句一句的，不连贯，对于篇幅比较长的内容不太适用。</p>
<ul>
<li><h3 id="关闭该网页的-JS"><a href="#关闭该网页的-JS" class="headerlink" title="关闭该网页的 JS"></a>关闭该网页的 JS</h3></li>
</ul>
<p>具体如下：</p>
<p>打开浏览器设置，搜索 JavaScript 然后你会看见该设置的内容，你可以将要复制的网页链接添加到 “不允许使用 JavaScript” 一栏中；若你比较懒，也可以直接将 JavaScript 整个关闭，然后回到你要复制内容的网页刷新，就能任意复制了；不过某些网站关闭 JavaScript 后可能不能正常运行；<strong>因此，复制完内容后一定要记得将 JavaScript 的开关打开！！</strong></p>
<ul>
<li><h3 id="利用插件"><a href="#利用插件" class="headerlink" title="利用插件"></a>利用插件</h3></li>
</ul>
<p>插件就比较简单了，可有时候作者不维护了就可能会失效；也可能出现一些别的什么问题；不过总的来说还可以。插件的话可以看这篇文章 <a href="https://mp.weixin.qq.com/s/7YwBXLyWnwUFdloToimFVA">插件的获取与使用</a></p>
<ul>
<li><h3 id="利用OCR识别"><a href="#利用OCR识别" class="headerlink" title="利用OCR识别"></a>利用OCR识别</h3></li>
</ul>
<p>这种软件很多，PC端的QQ好像也有这个功能？（太久没用过QQ了，不知道，听别人说的）；我这里说一下我常用的一个软件 PanderOCR ，这是在 GitHub 上开源的，想用可直接去 GitHub 上搜 PanderOCR ，也可以点 <a href="https://github.com/miaomiaosoft/PandaOCR">这里直达</a>，如果前面那个链接打不开，那么点 <a href="https://gitee.com/DDDDDGOOO/PandaOCR">这个备用链接</a> 吧！</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>干货</tag>
        <tag>复制某文库内容</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/archives/bd50b816.html</url>
    <content><![CDATA[<p>内网穿透，即 NAT 穿透，进行 NAT 穿透是为了使具有某一个特定源 IP 地址和源端口号的数据包不被 NAT 设备屏蔽而正确路由到内网主机。<span id="more"></span></p>
<p>最开始了解内网穿透是为了将自己写的HTML项目能够让别人看见，但当时又不了解服务器等东西，就上网搜方法；偶然看到说内网穿透可以，所以就找了好多教程；最终就选了以下这种方法！</p>
<hr>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装好jdk并配置环境变量、下载Tomcat并配置环境变量、注册一个Ngrok账号、一台电脑</p>
<h3 id="配置jdk与Tomcat"><a href="#配置jdk与Tomcat" class="headerlink" title="配置jdk与Tomcat"></a>配置jdk与Tomcat</h3><p>这个就不详写了，上网一搜一大堆！（注意Tomcat要与jdk的版本号对应，具体看官网对应关系：<a href="http://tomcat.apache.org/whichversion.html">Apache Tomcat® - Which Version Do I Want?</a>）</p>
<h3 id="注册并登录Ngrok以及开通隧道"><a href="#注册并登录Ngrok以及开通隧道" class="headerlink" title="注册并登录Ngrok以及开通隧道"></a>注册并登录Ngrok以及开通隧道</h3><p>Ngrok官网：<a href="https://www.ngrok.cc/">Sunny-Ngrok内网穿透服务</a></p>
<p>因为Ngrok是有免费线路的，所以完全可以白嫖。😁 一般不会失效，如果失效，再次开通就行。</p>
<p>登录进入后选择“隧道管理” —&gt; “开通隧道” —&gt; 向下滑，找到最后一个价格为0元的，购买就行；</p>
<p><strong>协议</strong>选<code>http/https</code>均可，<strong>隧道名称</strong>随便起，<strong>前置域名</strong>随便起（尽量短，好记；用英文、数字都行），<strong>本地端口</strong>默认就行，下面两个不用填，点击<strong>确定添加</strong>就可以了。</p>
<p>开通成功后可以在<strong>隧道管理</strong>查看自己的隧道了。然后下载客户端，<a href="https://www.ngrok.cc/download.html">Sunny-Ngrok内网转发客户端</a>，选择自己电脑的版本即可！</p>
<h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><p>下载后解压双击运行<code>Sunny-Ngrok启动工具.bat</code>，它会提示你要id,这时回到网页<strong>隧道管理</strong>找到你的<strong>隧道id</strong>粘贴进去，然后回车就行。</p>
<p>这时如果你通过你的网址进行访问会提示你隧道不可用；这是因为你没有运行Tomcat，你cmd运行Tomcat后，再刷新就能看到Tomcat的页面了，如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/Tomcat.jpg"></p>
<p>出现这个页面就恭喜你了，你已经成功了！</p>
<hr>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>这时你的内网穿透已经成功了，但是如果你有自己的HTML项目，该怎样让别人通过你的网址访问呢？</p>
<p>其实也很简单，将项目放到Tomcat目录下的<code>webapps</code>目录就行；访问的话就是<code>你的网址+项目的目录名+项目的名.html</code>，如我的一个就是<code>http://to.free.idcfengye.com/migong/index.html</code></p>
<p>这样就能让别人通过你的网址来访问你的项目了！</p>
<hr>
<h3 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h3><p>注意，内网穿透的过程中你运行的 <code>Tomcat</code> 与 <code>Sunny-Ngrok启动工具</code> 不能关闭，否则连接会断开！</p>
<p>完！</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>干货</tag>
        <tag>内网穿透</tag>
        <tag>Ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/archives/f3fb008f.html</url>
    <content><![CDATA[<blockquote>
<h4 id="写在前边"><a href="#写在前边" class="headerlink" title="写在前边"></a>写在前边</h4><p>我的第一篇博客，关于博客搭建的（hexo + github），记录搭建过程以及我踩过的坑！</p>
<p>有兴趣可以点开看看哦！</p>
</blockquote>
<span id="more"></span>

<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li>安装 git</li>
<li>安装 node.js</li>
<li>安装 hexo</li>
<li>注册一个 github 账号</li>
<li>搭建仓库</li>
<li>生成SSH Keys</li>
<li>生成博客内容</li>
<li>发布博客至互联网</li>
</ol>
<hr>
<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>​    首先，我们先来了解一下什么是 git；简单来说 git 是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用 git 同步到 GitHub 上。这里，我们就不多说了！</p>
<p>​    附上 git 官网地址：<a href="https://git-scm.com/">git官网</a></p>
<p>​    去官网下载适合自己电脑的版本，下一步，下一步跟着安装即可！我这里提供个教程，仅供参考！<a href="https://blog.csdn.net/ssd21988/article/details/107826076">git安装教程</a></p>
<p>安装完成后，我们可以测试一下安装成功与否：按键盘上 win + R 键，输入 cmd ，打开命令提示符窗口，接着输入 <code>git --version</code> ，看其是否出现版本号；如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/git-v.jpg"></p>
<p>​    如果出现，那么恭喜你，安装成功！</p>
<p>​    这时候你会发现，鼠标右击后会出现两个新的菜单 <code>Git GUI Here</code> 和 <code>Git Bash Here</code>，我们平时只会用到后者，不要搞错了！</p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>​    因为，我们的博客是基于 hexo 的，而 hexo 又是基于 node.js 的，所以这是必不可少的！</p>
<p>​    我们可以去其<a href="http://nodejs.cn/download/">官网</a>，下载并安装；也是直接下一步、下一步就行；这里我也放个教程，可以参考一下：<a href="https://blog.csdn.net/antma/article/details/86104068">node.js 安装详细步骤教程</a>；不过，值得注意的是：安装 node.js 会包含环境变量及 npm 的安装</p>
<p>​    安装好以后，我们要检测 node 与 npm 是否安装成功：按键盘上 win + R 键，输入 cmd ，打开命令提示符窗口，分别输入 <code>node -v</code> ，<code>npm -v</code> 看其是否出现版本号；</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>​    hexo 就是我们的个人博客网站的框架；安装的话也很简单，按键盘上 win + R 键，输入 cmd ，打开命令提示符窗口，输入<code>npm install -g hexo-cli </code>，进行安装hexo，等待安装好后，我们检验其是否安装成功输入<code>hexo -v</code>看是否出现版本号；如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/hexo-v.jpg"></p>
<h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><p>​    我们打开<a href="https://github.com/">github官网</a>，然后点右上角的Sign up，即可注册，其实也很简单；这里还是提供一篇教程，不会的可以看看：<a href="https://www.bilibili.com/read/cv5107169">github注册教程</a>，<strong>注意：一定要记住注册名、注册邮箱和注册密码哦！!</strong></p>
<blockquote>
<p>至此，我们的准备工作就做完了，接下来就是实操时间！</p>
</blockquote>
<hr>
<h3 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h3><p>​    注册完账号后登陆，点击右上角的 + 号，选择 New repository  ；然后，仓库名字填你的注册名 + <code>.github.io</code>，例如我的就是 <code>seatoro.github.io</code>，之后的 Description 可填可不填； 接下来选择 Public ，否则别人访问不了你的博客！然后把 Add a README file 勾上；最后，点击最下边的 Create repository 的按钮就能创建好你的仓库了！如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/create%20repository.jpg"></p>
<h3 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h3><p>​    我们可以在合适的盘新建一个文件夹，可以命名为MyBlog，hexo 框架与以后你自己发布的网页都会在这个文件夹中。一定要记住路径哦，别之后找不到了！打开这个文件夹，鼠标右键，点击 <code>Git Bash Here</code>，然后我们就会进入一个黑框框页面；直接输入 <code>SSH</code> ，来检测我们是否装有SSH，其实默认是装过的！然后输入 <code>ssh-keygen -t -C &quot;你注册github的邮件地址&quot;</code>。之后敲4次回车键（<strong>注意：不是连着敲，敲一次，等里面的内容不再变化后再敲下一次！</strong>）最后，你会看到一个用短线组成的框框，到这儿你就成功了！不要关闭这个窗口，一会还要用！！</p>
<p>​    按 Win + E 打开文件资源管理器，打开C盘 –&gt; 用户文件夹 –&gt; 个人文件夹 –&gt; .ssh文件夹，进入后我们可以看到里面有两个文件，用文本编辑器打开名为 <code>id_rsa.pub</code>的文件，<code>ctrl + a</code> <code>ctrl + c</code>复制里面的全部内容！</p>
<p>​    打开 github ，点击右上角头像找到 Setting ，点进去，往下划在左侧栏找到 SSH and GPG keys，点进去，第一个就是SSH Keys，点击 New SSH Key ，Title 随便填如：MyBlog；Key 就填你刚才复制 id_rsa.pub 里的一大串内容，（以你的邮箱结尾）；点 Add SSH Key 按钮即可。</p>
<p>​    测试是否绑定成功：在刚刚到黑框中输入 <code>ssh -T git@github.com</code>，敲回车，再输入 yes 敲回车即可，只要出现<code>Hi 你的github用户名</code>，就说明成功了！</p>
<h3 id="生成本地博客内容"><a href="#生成本地博客内容" class="headerlink" title="生成本地博客内容"></a>生成本地博客内容</h3><p>​    进入你在上一步中创建的文件夹，在空白处右键，点击 <code>Git Bash Here</code>，在出现的黑框中输入 <code>hexo init</code>来初始化我们的hexo，等待执行完成（如果出现错误，可多尝试几次），成功的标志：<code>INFO Start blogging with Hexo!</code>，这时我们打开上一步中创建的文件夹就会发现里面多了很多内容！</p>
<p>​    继续在黑框中敲命令：<code>hexo s</code>，启动本地服务器，看到出现 <code>http://localhost:4000</code>后就大功告成，接着我们只需要复制这个地址，去浏览器打开，就能看到我们的博客了；关闭服务器的话只需按 <code>ctrl + c</code>（没错就是复制的快捷键）就能关闭了，关闭后浏览器就打不开你的博客了！</p>
<h3 id="发布博客至互联网"><a href="#发布博客至互联网" class="headerlink" title="发布博客至互联网"></a>发布博客至互联网</h3><p>​    进入你在上上一步中创建的文件夹，找到<code>config.yml</code>文件（注意：没有扩展名是因为你没有开启这个功能，开启方法<a href="https://jingyan.baidu.com/article/f00622282564bdfbd3f0c827.html">点这儿</a> ）并用文本编辑器打开，找到最后几行更改为下图所示。（<strong>注意：最后一行要空出来，即branch: main 后面要空一行；每个冒号后面有一个空格</strong>）另，repo后面的内容把我的用户名（seatoro）改为你自己的！！保存，退出即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/yml.jpg"></p>
<p>​    进入你的博客文件夹，在空白处右键，点击 <code>Git Bash Here</code>，在出现的黑框中输入 <code>npm install hexo-deployer-git --save</code>，安装 hexo-deployer-git ；安装成功后接着敲命令<code>hexo g</code>，回车；执行完后接着敲 <code>hexo d</code>，这个命令是发布网页至服务器中的！（如若出错，多试几次）这时需要验证你的github账号，用户名，就是github用户名，密码就不是你设置的密码了；我们打开github，点击右上角头像找到 Setting ，点进去，往下划在左侧栏找到 Developer settings，点进去，在左侧栏找到 Personal access tokens ，点进去，Note 随便填，Expiration 默认30天就行，下边的复选框全部勾上，最后点击 Generate token 按钮生成令牌。复制生成的令牌，它只会出现一次，一定要记好；将复制的内容粘贴到刚才的密码框中点击 OK 就行了！这时就将本地内容上传到 github 中了，然后你就能通过网址访问了，网址就是你 github 主页左上角的网址，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/webline.jpg"></p>
<hr>
<p>​    至此，hexo + github 搭建博客就算是成功了，恭喜！！</p>
<p>​    不过这只是最初的内容，其实还有好多内容，比如：怎样美化你的博客、更换主题；怎样添加各种小功能；怎样新建、删除文章；怎样搭建自己的图床等等！</p>
<p>​    但我实在是不想写了，写教程太累了，😭  看情况，之后有时间再补充吧！如果在搭建过程中遇到了问题，可以将错误内容复制到百度，搜一下，你肯定会看到解答的；因为你肯定不是第一个遇到问题的人，如果没有搜到，只能说，你搜索的姿势不对，可以考虑换个姿势再来一次，哈哈哈！</p>
<p>​    就这样吧！！</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>踩坑</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>国庆快乐</title>
    <url>/archives/d31b6034.html</url>
    <content><![CDATA[<center><h3>祖国 72 华诞</h3></center>

<span id="more"></span>


<center><h3>愿国：山河锦绣，国泰民安</h3></center>

<center><h3>愿家：阖家欢乐，幸福团圆</h3></center>

<center><h3>愿你：天天开心，事事顺利</h3></center>

</br>

<img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/gq.png" style="zoom:50%;" />
]]></content>
      <tags>
        <tag>国庆快乐</tag>
      </tags>
  </entry>
  <entry>
    <title>新年快乐！</title>
    <url>/archives/5785bd01.html</url>
    <content><![CDATA[<center><h3>2022年列车已发车！我们一起向未来</h3></center>

<span id="more"></span>

<center><h3>新年快乐！年初的目标实现了吗？哈哈！</h3></center>

</br>

<img src="https://cdn.jsdelivr.net/gh/seatoro/Image/img/202a01011739b8.jpg" style="zoom: 33%;" />

<center><h3>新年伊始 喜乐安宁 好运连连</h3></center>
]]></content>
      <tags>
        <tag>新年快乐</tag>
      </tags>
  </entry>
  <entry>
    <title>神奇的代码</title>
    <url>/archives/81d62aff.html</url>
    <content><![CDATA[<blockquote>
<p>这篇博客主要介绍几种好玩的代码！“更改网页文字”、“修复电脑桌面白图标”、“微信消息轰炸PC端”等！有兴趣可以点开看看！</p>
</blockquote>
<span id="more"></span>

<ol>
<li><h3 id="更改网页文字"><a href="#更改网页文字" class="headerlink" title="更改网页文字"></a>更改网页文字</h3></li>
</ol>
<p>这个是很好玩的代码，你可以更改任意网页的任何文字；但要注意的是你更改后的网页并不会保留，关闭后再次打开还是原样！不过这样在某些时候已经足够了；无法保存你就截个图嘛~    这也是变相保存了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.body.contentEditable=&#x27;true&#x27;;</span><br></pre></td></tr></table></figure>

<p>​    <strong>使用：</strong>打开网页，按F12或者鼠标右键“检查”，打开控制台，将上面的代码复制到最下边的空白处敲击回车键，当显示“true”后，你就可以为所欲为了，最后别忘记截图哦~    哈哈！</p>
<ol start="2">
<li><h3 id="查看WiFi密码"><a href="#查看WiFi密码" class="headerlink" title="查看WiFi密码"></a>查看WiFi密码</h3></li>
</ol>
<p>这个代码可以查看你的笔记本电脑已经连接过的wifi密码，主要用于连接上但密码忘记的情况！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&#x27;netsh wlan show profiles&#x27;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear</span><br></pre></td></tr></table></figure>

<p>​    <strong>使用：</strong>按住键盘上的Win和R键，在弹出的窗口中输入CMD, 按下回车，将上面的代码粘贴进去再次敲回车键就OK了，它会显示你这台电脑连接过的所有WiFi及其对应的密码，自己很容易就可以找到了。</p>
<ol start="3">
<li><h3 id="修复电脑桌面白图标"><a href="#修复电脑桌面白图标" class="headerlink" title="修复电脑桌面白图标"></a>修复电脑桌面白图标</h3></li>
</ol>
<p>电脑桌面的某些图标突然变白，什么也不显示， 非常难看 ，重启也解决不了问题。这个时候就用到下面的代码了！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@duecho off</span><br><span class="line">taskkill /f /im explorer.exe</span><br><span class="line">CD /d %userprofile%\AppData\Local</span><br><span class="line">DEL IconCache.db /a</span><br><span class="line">start explorer.exe</span><br><span class="line">cho 执行完成</span><br></pre></td></tr></table></figure>

<p>​    <strong>使用：</strong>复制上面的代码，在桌面新建一个文本文档，将其粘贴进去，再将后缀改为 bat ，双击运行。然后刷新一下桌面就可以看到那个白图标已经恢复到原来的样子了！</p>
<ol start="4">
<li><h3 id="微信消息轰炸PC端"><a href="#微信消息轰炸PC端" class="headerlink" title="微信消息轰炸PC端"></a>微信消息轰炸PC端</h3></li>
</ol>
<p>这个应用场景就自己看着办吧！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">On Error Resume Next</span><br><span class="line">Dim wsh,ye</span><br><span class="line">set wsh=createobject(&quot;wscript.shell&quot;)</span><br><span class="line">for i=1 to 10</span><br><span class="line">wscript.sleep 700</span><br><span class="line">wsh.AppActivate(&quot;与某某聊天中&quot;)</span><br><span class="line">wsh.sendKeys &quot;^v&quot;</span><br><span class="line">wsh.sendKeys i</span><br><span class="line">wsh.sendKeys &quot;%s&quot;</span><br><span class="line">next</span><br><span class="line">wscript.quit</span><br></pre></td></tr></table></figure>

<p>​    <strong>使用：</strong>在桌面新建一个文本文档，名称随便起，将上面的代码粘贴进去，最后将后缀改为 vbs，把要发给朋友的话复制，然后再双击此vbs文件，最后鼠标点击一下发送框即可。</p>
<blockquote>
<p>说明：代码中的 “10” 代表发送的消息数，“与某某聊天中”则是你要发送的对象的，只需将“某某”改为你给好友的备注即可，建议消息的数目不要改太多！！！</p>
</blockquote>
<ol start="5">
<li><h3 id="图片隐写法"><a href="#图片隐写法" class="headerlink" title="图片隐写法"></a>图片隐写法</h3></li>
</ol>
<p>将你的文件隐藏在图片里，谁也找不到！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy /b test.jpg + document.rar yincang.jpg</span><br></pre></td></tr></table></figure>

<p>​    __使用：__将你要隐藏的文件和图片放在同一个文件夹中；按住键盘上的Win和R键，在弹出的窗口中输入CMD, 按下回车，并cd到你存放图片和文件的文件夹，输入以上代码（其中<code>test.jpg</code>为图片名称，<code>doucument.rar</code>为压缩包名称，<code>yicang.jpg</code>为输出的含有文件的图片名称）；这样就完成将文件隐藏到图片中了！</p>
<blockquote>
<p>说明：如果要找回文件，将输出的图片后缀改为<code>.rar</code>再解压即可！</p>
</blockquote>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>暂时停更</title>
    <url>/archives/e4b6eac1.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="83510400b1a64ba4e4fa009356e30e578ae5130283a5b8e8955441194a56cc6b">fa49ba0db6b3a8a014bad429b100e075fe461fe20ff799c5607976602c09b6fcbc2271e5303760348559a059c487a3c8f960669150da2abd694e96869511a6f303e2f4cd2b350647fe1f33b25407bd6ddb67992a920283ab9980ec5d5ff1252fe631f6c222738f71f983cb12879ee61b919e3f4b2b7115823392958a4c48207b96884191a59a58cbd85dcdf0d6efd06cfc3859847ce3c4334b100ace6577b63614cbce498e21fb00e16c2d14a11e16335519c9959e75930356101a7179cafeabfb9970f2bab0b160ec40de9404bb66d8fc40a73f57f8bd2a35d681d0af3c2f4d5651c40b180c51e73bd6a91e13ebdc3d427daf533a981be1b782c8876f3554fc66ed8f4c450fdac97b119b00ccb03e710b8098988271ad0f1f64cf3c8c692527e2a68512319d568c391ca86021d33ae38b98df993da49903a6bd94ffef516de118dbe172c296c2383d45364658357d4f09bdb680ef09aee7debea818b1ad27bd518ad9395a341d29029f2c8981b62358deac92b62794cd72eec6700858cd94105395ad012350ff42f37579c4df27de5d23890933e624e8fd5cd5c3278e2c6b6e97fa387cd97ba3845643a4770fcc56d3618b04289cf4103e227f99d4e1a08c7363f7be00bd36ece1ffee2c198aeee0b5635d406f87c3da1a101dfa8c190e82563fdae766bbafaf71a6e523589d7a82bf708cb312b9b671db18c396ef3f81172717508f2cd3a5e5aaf56b84077497a73e4fa6c73a74038c52a3b527974eda70ddbdcb107d1f42f5defa89bc437c0449720d47c8ca84dbf7ddda0fe16ba9344cb6cf042db870bf5da5a8f37ef12a7e62b5e9d1a3cf7e94f73b4431e08a8a9dd9f5280324d852356b102c019cdfe61188dbb04ba31a3f5520ce29c8c6af7a52fe8ca71d810bc4866535d1402f48ce39c4761e226aed121f1cd84abb97423f98b2881cabe1d950bf805881074519a9ed3c58e49a08b5ff4adb617f102f0c53a66295cf631a9bc3c4b8c799a4b3b3f6d15b86048d1a1c19dd2c3090b445a184d19bb5c9477400c1768496129104809191fffc565323a4fc09ee67d8407a59f95cc43ef4ec0b280f7338c7b400d4bf8c79cf8b51d5d38cb2ec78f48f1d0efefe5dd73a5e7aa695476e9b3cf536db12d1635ffd6cb39ff0a39827c4ad147c65ebae362e3ec03d04dd11a407e803f4b4f18a36d366a366e73ff5ca2f440b886acb143ef3989a2444efc248ab8c1417aaea99adfe8d4a337fd9be5309331fdcad50c3676f3aff294bb56692b3544ef1267553c3165f803a24f48bf5c0b47cc95cd3338d4ad2bc9078d961cdcee7e8971dab239c75cf6cf5ecd4cd1afb0d50d747cdbfd20829e24f34443781674498f7945f2d7eb67734df1c13b7dc0f1f57fb9f92906072669027a12ff1d86918392e0d720705bac084015088e27dd7b01c5bd79ca70806665265420eeaab674a609e56841e61c36778b514e684a15fec4e131e56f3e16d037c5672dc212c30fed5b9daed65ee4be39e75ea3db3f4814cb5829831aea6fd60a462434d727fc6251dce3659640059073d2aafd8bf6f3136cbbb5cbcc4420f45d7fc347f6bb59bd50f453cd386320255e975f926b2083e74c79bcbdb2636f97dd8dd8fb57d14a32cd6dcc3278bc346f6806ac6dab06cabcdc752d125231a2c4a3648531e55f15ac3488247e44cc5f0b7336f132a81d99fb0f7c383d01db2b466abc0c19e9e9b06a89a0ac31ebdd3983e0a85c0d78988241b8a270c8ed2f72f6bb1df57d675051a5bc6d959f2da3d09989e52af25a3c5c5292ab127352eb78f3167e6320a544f72b74fb5c5fe9c93da773d7145889062c6268acf7966cd3c032f17c6cb4a66203f91cdb4b821f89e85cc83102fb0d6fe6135c946e860717caa7d49b44f36378868d49fcdc90f9de8c90b992de6958c48b99a14fddb5b26dbf41c5385f14427c9e84db7015737e3650b66eba0db2c5a9f2f31e74fdb27d35cfea660f5608be0debb69cd098fa6233d08578394ebb9df979c6a9e26cecbfb9f091dbcb8c7f076f40186c2d98c0a69561c5e1e9189fbcb7a9eda14c040b50db39a1e3ff6acd05c5fd0b0225ce0a0d4ebf71232391827dc8a41f01eff25e86ea441</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>停更公告</tag>
      </tags>
  </entry>
  <entry>
    <title>突然连接不了GitHub?</title>
    <url>/archives/d840bd6.html</url>
    <content><![CDATA[<p>前段时间开学了，比较忙就没空写博客了；不过就在我忙里偷闲抽空写的时候发现连接不了GitHub了，嗯？什么情况？<span id="more"></span></p>
<p>这是什么情况？不应该啊？我啥都没动咋就不行了？一连串的疑问在我脑中萦绕！</p>
<p>以下为报错的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\MyBlog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:400:28)</span><br><span class="line">      at ChildProcess.cp.emit (D:\MyBlog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>

<p>没办法，第一次遇到，上网搜解决办法吧！大部分的帖子都说ssh失效了，重新生成一下；好，我照做！但完全没效果是什么意思，是我不配了吗？难搞哦！最后想了想先放这儿吧，有空再好好收拾收拾你！</p>
<p>过了几天，我又屁颠屁颠地回来了；继续搞，我还就不信了！继续上网搜解决办法呗，但结果都大差不差，都让我重新生成ssh；可我都重新生成几遍了，还是不行，这怎搞？老规矩，先晾着，说不定哪天我试试他自己就好了！（<del>我在想peach</del>）</p>
<p>不过，这次我可没放着就不管了；我甚至走路都在想到底是哪里出问题了；后来仔细分析了一下，好像和家里的改变就只有地区的改变了！再深想一下，网络也随之改变了！嗯，一定是这个原因，死马当做活马医，试试吧！<strong>断开校园网，拔掉网线</strong>，换个手机热点看看！（<em>一定要拔掉网线，不要问我为什么会知道</em>）</p>
<p>没想到啊，没想到！结果真的出在这里，用手机热点后一下就连通了！！（话说，这是为什么呢？校园网端口没开放？那换个端口行不？我还没试过，有谁试了可以给我说一下哈！）</p>
<p>到这儿，文章就结束了；结果只是换个网络就行，整的那么复杂。还好我没想不开将博客删了重建！也算是一点经验吧！希望遇到这个问题的朋友看到这儿后可以完美解决！</p>
<hr>
<p>突然又想到福尔摩斯的一句名言：</p>
<blockquote>
<h4 id="排除一切不可能的，剩下的即使再不可能，那也是真相！-—-夏洛克·福尔摩斯"><a href="#排除一切不可能的，剩下的即使再不可能，那也是真相！-—-夏洛克·福尔摩斯" class="headerlink" title="排除一切不可能的，剩下的即使再不可能，那也是真相！  — 夏洛克·福尔摩斯"></a>排除一切不可能的，剩下的即使再不可能，那也是真相！<br><br>  — 夏洛克·福尔摩斯</h4></blockquote>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>踩坑</tag>
        <tag>博客</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解析freenom域名</title>
    <url>/archives/79444b31.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        前几天刚用 github + hexo 搭建了一个博客，用来记录自己的学习成果！但域名是 github 的二级域名，看着不太好看；就寻思怎样白嫖一个域名；<span id="more"></span>搜来搜去，看到了一个帖子说可以去 freenom 白嫖，就想着试试；结果自己根本搞不了，无奈继续搜教程呗！看了好多教程，都没成功；想来想去就上 Youtube 了，按时间排序，第一个就是；真是保姆级的教程，一次成功，哈哈！视频链接我放这儿了，有需自取：<a href="https://www.youtube.com/watch?v=dTVKfuW9BiU">白嫖freenom域名</a></p>
<p>​        白嫖成功了，自然要用起来，不然费那么大劲干什么！其实我之前是有买过域名和服务器的，但感觉有一丢丢贵，就没续费了；但那是在阿里云买的，域名解析和现在的情况完全不同；没办法，就又双叒上网搜教程，还是找了好多，搜索的姿势也换了好多，终于还是让我找到了，难呐！（该说不说，搞这个也许代码功夫没长进，搜索资源的心得倒是攒了一大堆！）于是又是一波操作，现在弄成功了，域名是 totoro933.tk ，不出意外应该之后的很长一段时间都有效，若是打不开了，或者打开后不是我的博客，就说明被回收了（免费的还是有弊端的，有条件还是自己买个吧）。好了，接下来我会将我踩的坑分享一下，有需要的可要好好看了！</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>​        有一个域名，也可以和我一样去 freenom.com 白嫖（教程在上边）</p>
<p>​        注册好并实名认证 Dnspod ，官网地址：<a href="https://console.dnspod.cn/">Dnspod官网</a></p>
<h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>​        其实在 freenom 买过域名后，它本就提供了 DNS 解析服务，但因为 freenom 的 DNS 解析在国内可能不是很流畅，所以我才会选用 Dnspod （这是腾讯家的网站）；在解析之前，我们要把这个域名的控制权从 freenom 交到 Dnspod 的手上：打开 Dnspod 主页，在侧栏中选择“我的域名”，点击添加域名，把你的域名填进去，如 我的就是：totoro933.tk ，点击确定；接着往下，他会给你两个 dns server 地址，将其填到 freenom 中，具体流程为：</p>
<blockquote>
<p>登陆freenom，从首页点击 services -&gt; my domain -&gt; manage domain -&gt; Management Tools -&gt; Nameservers -&gt; Use custom nameservers (enter below) -&gt; 在前两个空中填入 Dnspod 给你的两个的 dns server 地址，最后点击最下边的提交按钮就好了。</p>
<p>如果你找不到 My domain ， 请确认你是不是登录了。</p>
</blockquote>
<p>​        完成上述步骤后，打开你的 Dnspod 主页，找到你刚才添加的域名，点击它，你会跳到添加解析度页面，点击添加记录，<em>主机记录</em> 一栏填<code>www</code>，<em>记录类型</em> 填<code>A</code>，<em>线路类型</em> 为默认，<em>记录值</em> 填 ping xxxx.github.io后所得到的IP地址，其中xxxx为你的 github 仓库名，后边的默认就行，点击确定；然后再点击快速添加解析，选择“域名映射(CNAME)”，填入xxxx.github.io，确定即可！到这里，DNS解析已经完成了。<strong>（注意：有时候 DNS 的设置不是即时生效的，不同地方需要不同的时间，有时候几分钟就好了，有时候要一晚上一天，设置好后可以美美的睡一觉，第二天应该就没问题了！）</strong></p>
<h3 id="设置github"><a href="#设置github" class="headerlink" title="设置github"></a>设置github</h3><p>​        进入 github 你托管博客的那个项目，按顺序依次点<code>setting -&gt; GitHub Pages -&gt; Custom domain</code>， 输入你的域名，如 我的为：totoro933.tk，点 save 。</p>
<h3 id="增加-CNAME-文件"><a href="#增加-CNAME-文件" class="headerlink" title="增加 CNAME 文件"></a>增加 CNAME 文件</h3><p>​        在你存放博客的根目录的 <code>source</code> 文件夹下新建一个文件  <code>CNAME </code>，注意，它没有后缀，就叫 CNAME ，文件内容填你的域名！</p>
<h3 id="修改-config-文件"><a href="#修改-config-文件" class="headerlink" title="修改 _config 文件"></a>修改 _config 文件</h3><p>​        去你 blog 的根目录下，修改 _config.yml 文件：打开后搜 skip ，你会看到 <code>skip_render:</code>，然后在后边添加<code>CNAME</code>，注意，在CNAME前有个空格！！！</p>
<p>​        然后保存，之后就能通过你的域名来访问你的博客了；如果没生效的话，可以先进行一波</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p>​        然后就能愉快的访问了！</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>踩坑</tag>
        <tag>freenom</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>精确搜索你需要的资料</title>
    <url>/archives/c485373b.html</url>
    <content><![CDATA[<h3 id="今天写写关于搜索的文章吧！"><a href="#今天写写关于搜索的文章吧！" class="headerlink" title="今天写写关于搜索的文章吧！"></a>今天写写关于搜索的文章吧！</h3><p>“搜索”如果用好了，你几乎可以搜到任何你要的资料，但前提是你得会搜哦！</p>
<p>以下是我常用的搜索小技巧，你可以参考参考。</p>
<span id="more"></span>

<hr>
<h3 id="1-将结果限定在某个网站中"><a href="#1-将结果限定在某个网站中" class="headerlink" title="1. 将结果限定在某个网站中"></a>1. 将结果限定在某个网站中</h3><p>实现这个操作并不难，用<code>site</code>指令即可；</p>
<p>如：我要搜知乎中关于 “人工智能” 的内容，就可以这样来表达：<code>人工智能  site:zhihu.com</code>，这样就能搜到知乎中所有有关人工智能的文章，还弥补知乎站内搜索效果差的缺陷。</p>
<h3 id="2-将结果限定为某种文件类型"><a href="#2-将结果限定为某种文件类型" class="headerlink" title="2. 将结果限定为某种文件类型"></a>2. 将结果限定为某种文件类型</h3><p>这个也不难理解，不过你得有明确的目标，知道你要搜索的文件类型；这种适合用来搜电子教材或文档；</p>
<p>如：我要搜 “2020考研数学真题”，就可以这样表示：<code>2020考研数学真题 filetype:pdf</code>，这样你搜到的就都是各大网站的PDF文件。</p>
<h3 id="3-限定搜索结果的时间范围"><a href="#3-限定搜索结果的时间范围" class="headerlink" title="3. 限定搜索结果的时间范围"></a>3. 限定搜索结果的时间范围</h3><p>你如果要搜比较新的内容，不想要时间久远的内容来徒增工作量，那么就能用得上这个指令了；</p>
<p>如：我要搜 “人工智能” 最前沿的资讯，就能这样写：<code>人工智能 2020..2021</code>，这样搜出来的基本就是2020年到2021年关于人工智能的信息了。当然，时间你可以随便更换。</p>
<h3 id="4-限定标题中必须包含的关键字"><a href="#4-限定标题中必须包含的关键字" class="headerlink" title="4. 限定标题中必须包含的关键字"></a>4. 限定标题中必须包含的关键字</h3><p>这个也很容易理解了</p>
<p>如：我要搜关于 “ AI ” 的文章，但标题中必须包含 “大数据”，就能这样写：<code>AI intitle:大数据</code>，这样搜到的 AI 信息就都是标题中带有 “大数据” 三个字的。</p>
<h3 id="5-限定结果网址中包含字段"><a href="#5-限定结果网址中包含字段" class="headerlink" title="5. 限定结果网址中包含字段"></a>5. 限定结果网址中包含字段</h3><p>如：我要搜腾讯的关于 “人工智能” 的网站，那么就能写为：<code>人工智能 inurl:tencent</code>，这样就能直接看到所有腾讯旗下关于人工智能的内容，不用再在浏览器中一页一页向下找。</p>
<h3 id="6-删除结果中你不想要的信息"><a href="#6-删除结果中你不想要的信息" class="headerlink" title="6. 删除结果中你不想要的信息"></a>6. 删除结果中你不想要的信息</h3><p>此指令可以删除搜索结果中不必要的信息；不过，我一般用来去掉广告、推广之类的。</p>
<p>如：我要搜 “人工智能学习” ，就能写为：<code>人工智能学习 -广告 -推广</code>，这样搜出来的没有广告，没有搜索引擎的推广，都是精华；不信你可以试试。</p>
<p>当然，这个指令不止可以用来去广告，你也可以开动你那聪明的小脑瓜，想想怎样用可以更加方便、快捷、高效。</p>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h3><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">作用</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">site</td>
<td align="center">将结果限定在某个网站中</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">filetype</td>
<td align="center">将结果限定为某种文件类型</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">时间1..时间2</td>
<td align="center">限定搜索结果的时间范围</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">intitle</td>
<td align="center">限定标题中必须包含的关键字</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">inurl</td>
<td align="center">限定结果网址中包含字段</td>
<td align="center">见文中</td>
</tr>
<tr>
<td align="center">“ -“（减号）</td>
<td align="center">删除结果中你不想要的信息</td>
<td align="center">见文中</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>干货</tag>
        <tag>搜索技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌账号的注册</title>
    <url>/archives/c7047092.html</url>
    <content><![CDATA[<p>今天写一个关于国内注册谷歌账号的方法，防止自己忘记，也可给不会的朋友一点思路！</p>
<p>这些方法也是截止写这篇文章为止，我自己测试可用的！</p>
<span id="more"></span>

<p>注册的前提是，你有 “科学上网” 的方法；否则就算注册了也没用不是吗？另外，你还得安装谷歌框架，这个软件你可以点 <a href="https://yinzhen.lanzoui.com/iM4Bkutxnfa">这里</a> 下载。</p>
<p>这里我不提供该上网方法与软件，有兴趣自己搜！</p>
<p><strong>ps：文中环境为 “科学上网” 环境下！</strong></p>
<hr>
<h3 id="1-利用QQ邮箱"><a href="#1-利用QQ邮箱" class="headerlink" title="1. 利用QQ邮箱"></a>1. 利用QQ邮箱</h3><p>手机上下载QQ邮箱，在 “添加账户” 处选择 Gmail 邮箱，点击后会出现登录页面；你可以点击左下角的 “创建账号” 来进行注册，接着一步一步往下走就行。</p>
<h3 id="2-利用Gmail邮箱"><a href="#2-利用Gmail邮箱" class="headerlink" title="2. 利用Gmail邮箱"></a>2. 利用Gmail邮箱</h3><p>Gmail邮箱在各大软件商店都能下载，安装完成并打开后选择创建账户，一步一步往下即可，国内手机号是可以接到验证码的！</p>
<p>今天我刚用此方法注册了一个新的账号，可行！ </p>
<h3 id="3-利用OurPlay加速器"><a href="#3-利用OurPlay加速器" class="headerlink" title="3. 利用OurPlay加速器"></a>3. 利用OurPlay加速器</h3><p>该软件在各大应用商店也能下载，下载安装后，点击登录账户（此时没有创建账户这个选项，别急，往下看）；随便输入一个已经存在的账号【例如：aaaa666#gmail.com （将 # 改为 @ 即可）】，进入下一步输入密码；不是你的账号，你肯定不知道密码，所以点手机上的返回菜单（不要大返回桌面，返回上一步就行），这是你会发现在登录账户页面的左下角出现了 “创建账户” 的按钮；接着一步一步向下就行了。注册完成就能登录Gmail了，这时就可以将OurPlay加速器卸载了！（没错，卸磨杀驴😉）</p>
<h3 id="4-利用-Google-Chrome-浏览器"><a href="#4-利用-Google-Chrome-浏览器" class="headerlink" title="4. 利用 Google Chrome 浏览器"></a>4. 利用 Google Chrome 浏览器</h3><p>这个方法是我听别人说的，今天我测试了一下，没成功；但想到可能是我自己的原因，所以就写出来给大家看看，万一你们可以呢，对吧！</p>
<p>将PC端 Google Chrome 浏览器语言设置为英文，重启浏览器；然后打开页面进行注册，按部就班地往下即可。</p>
<hr>
<h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>注册完成后，不要频繁更换代理IP，有可能会被封，就这样。</p>
]]></content>
      <tags>
        <tag>教程</tag>
        <tag>干货</tag>
        <tag>注册谷歌账号</tag>
      </tags>
  </entry>
  <entry>
    <title>近期的感悟！</title>
    <url>/archives/4b219b78.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f40fd01b14c818e01cc9e01578bf152eecd25f695cd32287f94380c488faf33b">fa49ba0db6b3a8a014bad429b100e0759b91eb883a8c140595ba538552daf3a32402730385afbc81c52a6465067b53f58e8d8320a3e94e769c7511802efdad9cd0c148622d7616ea21f5b1969cff6ec1e7f9ae2bbb072fa2d9ba74c2217ce75b30ea76838f5684172fa551050de70aa6d0cc53a3f40ea4955e0c3f4d5321b49c88470afbc9c3cf3317c6fc286f2b644419e6d40506e4038d890e56f808cde7a5b46618617208238af0ddfc3a6da7e5452625743d59d5971f63a65a3f4d40698bc44281d4f12749ec061d027ce2b770c2bd40d926cfcb18726081dd7ee3a6e75fcf75ef383fdb74c7f88789d7c6e42e1c49c9cd0129a216dd429d84cf41e184e816c412996355cb0856f434a3fc38d1475ac412b53c30ef9bb8363afc3012e768beb9847aef55fb364a13366841060ddee41124097136dd89866d8fe9888c185c7c7ebac3f7dc7a6e4e179b58a6be6667847ebc7e41499954f57f3f36364f3aa7d7fcdb118e1fb777c7ce1824c4e6aba1b0b156343b1c720eff6d86b70003342c8d7851cecc95b88f9881a1f3c1420cbbe0565af0d108f81011227b32b69ee1586818326983ca3cb3b71d4e65351131553a02a54f7b5d74d4af9c537a302e3f31287a41cad012eb2a140c316895844c43b378b54e85e318fa3c2dbcc9ff2476e288cbc6185fb060f7176c4da066bdae7c1fcc31ad6c3b69b40a2094226999fff738e6c14b110b8346c90b403a49c8bf1bf2c084ba6674272d597b0e94e196a192b75603f21bc63e2e89efdfde68aa3e18c4be107ad16b4fd46d7aa4de084dd3518519f7df3d49fcac3eb1a42dcf8d356552d5be9160c05dfd8a5c7908fcf4e3b08e92cfa59d0702898a392847838c6392b3abdefa6946d9201277a4e5e79f88bd3637a5f51ed093e723eaff00bf7d62b13f573bf23b5ad283db2e6821017c252851b776a97c53af6638075072f334b0576e620057d0dbe3c8ed610e8b82ec344309710b7f22d679c5a9d0483850d5d8b3eef2d4793f1d1107bd20622838f854becaa292020779f82405ebd87283e37c1ad3b5c701cde16fddbda55183cc2238cb59898f8175909ae29bdb04de401169bd2c41fb259307d585f826557e5a252a2eab2eb7710feeadfaa10164e00a52f3e955543d9135381bcf3bf94c0c414fedbbceb594d9c696902d79778138427f03290d6a1a28bff41caf36a0478fdbc4b2813559f027e735a9a2ea03fb4090bb697cc77ee0a7e4060476d58507995e0734576a2843d3cbce5de383ff12d2d9fe479368f4bab2a98addb2018cfe0d175702176e68d46bfad48b2eb910eb59078ea035ed36f2b2709a4a3042ae2b29766d153bd9e723f558cd4e8a7f7532cc9b1e44a10873a7b2cf7b8da57daa94e768f8370f47adfc1d0938a48d6fd9430ee77421cd007fdd5c35f7a4487b3be40047d2f6c7c5981185cb5de3fa8b3853e13c106cfe870a07254298bd94628b982e6aea04dfb6efb8c0a1dfb9e3489fa0b3a6feaf3b08426c9db83e846be7b555c6a461ccfa3cfd8b42615ffe9001d791761ff4f4b9cacd358acaca29b826acce03f7ce83ba2a250a9b213d35e487443a659a4e362899746b1bad980ca86e9ada04364aa506eae1d32f0eab3ba9b92900d636da026e6c076d53c058c86606a1a0cfcbbdd03a6de6f66d5743327a81e587b6495588173507d1ac9b12aedc4512c875646241286d140d7a0799db81711bc7f2582d29c4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
